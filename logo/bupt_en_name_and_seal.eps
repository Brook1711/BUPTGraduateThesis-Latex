%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: bupt_en_name_and_seal.pdf
%%Creator: Adobe Acrobat 19.10.0
%%For: yuans
%%CreationDate: 2019/5/13, 12:06:36
%%BoundingBox: 0 0 450 99
%%HiResBoundingBox: 0 0 449.3365 98.1620
%%CropBox: 0 0 449.3365 98.1620
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 943 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Microsoft® Word 2019"
   dc:format="application/pdf"
   xmp:CreatorTool="Microsoft® Word 2019"
   xmp:CreateDate="2019-05-13T09:16:01+08:00"
   xmp:ModifyDate="2019-05-13T09:17:56+08:00"
   xmp:MetadataDate="2019-05-13T09:17:56+08:00"
   xmpMM:DocumentID="uuid:CDD8610E-7596-4D53-A85D-C370BB933D85"
   xmpMM:InstanceID="uuid:1ca704a2-b805-4018-b4da-fcf49a0cf397">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Saul Yuan</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -98.162 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 98.162 li
449.336 98.162 li
449.336 0 li
cp
clp
47.173 5.9425 mo
45.1959 6.05676 41.8612 6.48376 40.8124 6.75684 cv
40.4346 6.85541 39.8905 6.97687 39.6158 7.02448 cv
38.6922 7.18427 34.8798 8.46576 33.2551 9.16241 cv
32.0208 9.69183 29.6672 10.9131 29.0858 11.3262 cv
28.897 11.4603 28.7067 11.5673 28.6578 11.5673 cv
28.5209 11.5673 25.6472 13.5411 24.5891 14.3617 cv
24.0728 14.7624 23.5058 15.197 23.3172 15.3366 cv
22.3878 16.024 19.7632 18.6028 18.3654 20.2019 cv
15.7599 23.1823 12.8603 27.5819 11.2424 31.0103 cv
10.1675 33.2869 9.75727 34.2679 9.31103 35.6278 cv
8.61846 37.7381 7.90364 40.7699 7.50497 43.2897 cv
7.46598 43.5379 7.37392 44.3639 7.29858 45.1444 cv
6.63343 52.0386 7.64495 59.2516 10.1901 65.7635 cv
11.01 67.8611 11.381 68.6454 12.4034 70.445 cv
16.0744 76.9045 20.4042 81.5905 26.3651 85.5554 cv
27.1586 86.0834 27.9646 86.5851 28.1664 86.6772 cv
28.3656 86.7678 28.8467 87.0272 29.2244 87.2479 cv
32.1495 88.9557 35.774 90.4772 39.4898 91.5577 cv
44.081 92.893 52.7152 93.19 58.1313 92.1994 cv
60.5496 91.757 64.0629 90.794 65.3108 90.2314 cv
65.4494 90.1692 66.0161 89.9399 66.5704 89.7222 cv
71.0798 87.9521 75.4167 85.3135 79.1661 82.0596 cv
80.5103 80.8931 80.6122 80.7932 82.5753 78.7212 cv
85.5199 75.6124 87.8727 72.1337 89.815 68.0148 cv
92.0003 63.3822 93.0867 59.5729 93.7988 54.0472 cv
94.0446 52.1412 94.088 46.4167 93.8676 45.0164 cv
93.7903 44.5262 93.6332 43.4561 93.5206 42.6503 cv
93.1548 40.0407 92.3138 36.8446 91.3693 34.4767 cv
91.1294 33.8755 90.8102 33.0289 90.6654 32.6094 cv
89.927 30.472 87.0091 25.3696 84.9598 22.6321 cv
83.0732 20.1125 80.1177 16.9589 78.4106 15.6439 cv
76.4327 14.1205 73.8166 12.3486 72.4273 11.592 cv
66.9575 8.61224 61.9102 6.95087 56.0655 6.20593 cv
53.7041 5.90448 49.8181 5.78918 47.173 5.9425 cv
cp
52.2744 6.44824 mo
53.7858 6.48486 56.1774 6.71753 57.5647 6.96252 cv
58.9248 7.20276 61.5316 7.75201 61.6456 7.82178 cv
61.7011 7.85596 62.0928 7.96417 62.5209 8.06305 cv
62.9494 8.16223 63.4082 8.29364 63.5475 8.3573 cv
63.6871 8.42126 64.0512 8.54584 64.3661 8.63788 cv
66.0038 9.11627 71.3173 11.4733 72.2385 12.1299 cv
72.4469 12.2781 72.8116 12.5056 73.0511 12.6357 cv
73.29 12.7657 73.857 13.1172 74.3104 13.4159 cv
74.7618 13.7133 75.5639 14.2351 76.0802 14.5674 cv
76.5997 14.9014 77.4784 15.5604 78.0327 16.0316 cv
78.5871 16.5031 79.3239 17.1163 79.6702 17.3942 cv
80.2693 17.8753 81.8694 19.511 82.3662 20.1506 cv
82.4987 20.3209 82.8398 20.7135 83.1331 21.033 cv
83.5975 21.5391 86.5951 25.5482 87.006 26.2135 cv
87.0943 26.3562 87.3681 26.8657 87.624 27.3646 cv
87.8797 27.8621 88.3779 28.7717 88.7451 29.4113 cv
89.1125 30.0508 89.5827 31.0117 89.8028 31.5732 cv
90.019 32.1231 90.3893 32.9974 90.6161 33.4915 cv
90.9829 34.2925 91.4405 35.7175 92.2008 38.429 cv
92.5683 39.7392 93.0193 42.2789 93.2794 44.5046 cv
93.6325 47.5234 93.5039 52.71 93.004 55.6329 cv
92.8945 56.2725 92.7596 57.1136 92.7001 57.5259 cv
92.4427 59.3118 91.5458 62.1691 90.2835 65.2263 cv
89.7292 66.569 89.2156 67.8279 89.1355 68.0401 cv
89.053 68.2577 88.8761 68.5903 88.7259 68.8076 cv
88.5805 69.019 88.2502 69.5878 87.9919 70.074 cv
87.4132 71.1612 85.4809 74.2104 85.0819 74.6659 cv
85.0076 74.7504 84.7783 75.0498 84.5717 75.3311 cv
83.965 76.1575 82.1479 78.209 80.81 79.5777 cv
78.5915 81.8475 74.4549 84.9912 71.7974 86.4263 cv
71.3498 86.6682 70.5504 87.1008 70.0341 87.3803 cv
69.5173 87.6602 68.9466 87.937 68.7745 87.9911 cv
68.5079 88.075 67.7164 88.4247 66.5701 88.9647 cv
65.8833 89.2884 62.4891 90.3755 61.2168 90.6797 cv
60.4233 90.8689 59.4269 91.1037 59.0128 91.1981 cv
58.5995 91.2926 57.8603 91.4058 57.3816 91.448 cv
56.9032 91.4897 56.4662 91.5496 56.4183 91.5797 cv
56.0429 91.8144 49.3018 92.0029 47.173 91.839 cv
46.76 91.8069 45.989 91.7467 45.4727 91.7053 cv
42.2584 91.4489 39.6281 90.8385 36.3157 89.5799 cv
34.2636 88.8004 34.0356 88.7001 31.4914 87.4566 cv
28.8087 86.145 25.6141 84.2325 24.753 83.4218 cv
24.6148 83.2922 24.0222 82.8565 23.4431 82.4589 cv
22.2879 81.6664 19.2866 78.7975 18.1539 77.4034 cv
17.7697 76.9302 17.2006 76.2304 16.9059 75.8683 cv
16.6086 75.5036 15.775 74.3077 15.0595 73.2205 cv
12.1492 68.7973 10.3534 64.753 9.21047 60.0458 cv
8.87408 58.6606 8.73751 57.9738 8.49906 56.4644 cv
7.55525 50.4909 7.80851 44.0413 9.18682 38.9406 cv
10.8639 32.7374 13.4701 27.5015 17.2416 22.7601 cv
20.369 18.8283 23.1277 16.2191 27.2086 13.3324 cv
29.4376 11.7559 33.6575 9.58136 36.2143 8.69159 cv
37.0962 8.38501 39.8895 7.60248 40.5599 7.47449 cv
43.4065 6.93073 44.17 6.80005 45.1572 6.68878 cv
46.5051 6.5365 49.1656 6.38251 50.1326 6.40033 cv
50.5128 6.40717 51.4809 6.42902 52.2744 6.44824 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.92929 .879301 .889677 .799283 cmyk
f
48.0801 7.06006 mo
47.8029 7.11926 47.7937 7.54327 48.0675 7.651 cv
48.179 7.69482 48.4012 7.7301 48.5651 7.7301 cv
48.7286 7.7301 48.8864 7.77594 48.9175 7.83246 cv
48.9489 7.88885 49.014 8.59375 49.0626 9.3996 cv
49.1108 10.2052 49.1704 11.1229 49.1946 11.4394 cv
49.2189 11.7553 49.2474 12.5204 49.2576 13.1343 cv
49.2734 14.0681 49.314 14.2745 49.5034 14.3785 cv
49.8369 14.5623 49.9909 14.2919 49.9382 13.6141 cv
49.9136 13.2958 49.863 12.5522 49.8247 11.9514 cv
49.7538 10.8386 49.6341 9.1687 49.5673 8.36993 cv
49.5235 7.8454 49.6826 7.60248 50.07 7.60248 cv
50.3722 7.60248 50.7298 7.2746 50.5864 7.12915 cv
50.4977 7.03851 48.4452 6.98212 48.0801 7.06006 cv
f
53.068 7.06488 mo
52.8411 7.08643 52.5964 7.18701 52.5081 7.29517 cv
52.3131 7.53436 52.2289 8.94525 52.3914 9.2522 cv
52.4582 9.37769 52.9746 10.058 53.5275 10.7486 cv
54.5414 12.015 li
54.5414 12.8082 li
54.5414 13.7421 54.3276 13.9573 53.5467 13.8098 cv
52.8784 13.6839 52.7781 13.55 52.7781 12.7825 cv
52.7781 12.0663 52.6861 11.8976 52.3627 12.0239 cv
52.1427 12.1098 52.0284 13.1535 52.1755 13.729 cv
52.3032 14.2273 52.9167 14.5095 53.8742 14.5095 cv
54.9038 14.5095 55.0674 14.3176 55.128 13.0385 cv
55.1803 11.9384 55.1266 11.7926 54.305 10.7999 cv
53.1826 9.44379 53.0512 9.21112 53.0143 8.51031 cv
52.9951 8.15198 53.0193 7.81842 53.068 7.77014 cv
53.1676 7.6709 54.5038 7.69141 54.6677 7.79443 cv
54.7228 7.82928 54.7683 8.15198 54.7683 8.51031 cv
54.7683 9.70044 55.2172 9.59741 55.3254 8.38232 cv
55.4095 7.43616 55.1334 7.12408 54.1637 7.06689 cv
53.7859 7.04498 53.2877 7.04401 53.068 7.06488 cv
f
45.0948 7.29211 mo
44.9916 7.3147 44.6353 7.36841 44.3078 7.41046 cv
43.9551 7.45569 43.5828 7.60284 43.401 7.76874 cv
43.0999 8.04285 43.0965 8.06921 43.2559 8.8241 cv
43.3453 9.24597 43.4712 9.6908 43.5331 9.80243 cv
43.5954 9.91461 44.226 10.4745 44.9313 11.0432 cv
46.065 11.9572 46.2251 12.1355 46.2915 12.5591 cv
46.3343 12.8277 46.3952 13.1849 46.4301 13.3711 cv
46.4668 13.5631 46.4185 13.7664 46.3169 13.8518 cv
46.1026 14.0319 45.0029 14.0836 44.843 13.9213 cv
44.7807 13.8577 44.7013 13.5247 44.6668 13.1795 cv
44.6319 12.8338 44.5303 12.5063 44.4399 12.4496 cv
44.1761 12.2829 43.9533 12.5909 44.0235 13.0258 cv
44.0583 13.2435 44.1111 13.5669 44.1402 13.7423 cv
44.2886 14.6389 44.6288 14.8367 45.8128 14.7142 cv
47.022 14.5892 47.1624 14.4316 47.0768 13.2944 cv
47.0392 12.7955 46.9396 12.2463 46.852 12.0536 cv
46.7644 11.8621 46.2412 11.3433 45.6746 10.8865 cv
44.2511 9.74011 44.0652 9.51324 43.9889 8.83057 cv
43.9276 8.28033 43.9458 8.23383 44.2637 8.11401 cv
44.4516 8.04358 44.8177 7.98633 45.0822 7.98633 cv
45.6068 7.98633 45.7245 8.12701 45.7245 8.75391 cv
45.7245 9.2782 45.8443 9.52112 46.1022 9.52112 cv
46.4257 9.52112 46.4752 9.29083 46.3257 8.48535 cv
46.1406 7.48712 45.7827 7.14014 45.0948 7.29211 cv
f
40.1823 8.29706 mo
38.7591 8.61328 38.5836 8.83606 38.906 9.9173 cv
39.0394 10.3657 39.3894 11.644 39.6803 12.7442 cv
40.2582 14.9315 40.5111 15.4851 40.9885 15.6074 cv
41.4419 15.7233 42.6766 15.3195 43.0167 14.9441 cv
43.2672 14.6677 43.2901 14.5605 43.1867 14.1512 cv
43.1207 13.8909 43.0102 13.4477 42.941 13.1661 cv
42.8716 12.8848 42.6789 12.194 42.5126 11.6314 cv
42.3463 11.0685 42.0869 10.1763 41.9357 9.64874 cv
41.4748 8.03705 41.4474 8.01611 40.1823 8.29706 cv
cp
41.0392 9.04132 mo
41.1089 9.12964 41.3146 9.80237 41.4991 10.5443 cv
41.6835 11.2861 41.921 12.1447 42.0298 12.4629 cv
42.4014 13.55 42.567 14.4339 42.4301 14.5989 cv
42.2598 14.8035 41.2062 14.9599 41.0518 14.8035 cv
40.9218 14.6714 40.7562 14.1382 40.2442 12.207 cv
40.0848 11.6057 39.8463 10.7338 39.7105 10.2562 cv
39.5212 9.59094 39.4996 9.36298 39.616 9.26312 cv
39.7337 9.16211 40.3842 8.96539 40.8376 8.89319 cv
40.8797 8.88672 40.9683 8.95172 41.0392 9.04132 cv
f
60.7765 8.97089 mo
60.6656 9.2384 60.2437 10.2626 59.8386 11.2478 cv
58.3764 14.8039 58.2604 15.1395 58.4339 15.3154 cv
58.5547 15.4379 58.6481 15.3856 58.8999 15.0529 cv
59.1518 14.7204 59.3031 14.6371 59.6555 14.6371 cv
60.3231 14.6371 60.5877 14.8333 60.5877 15.3277 cv
60.5877 15.8266 60.8549 16.1459 61.0592 15.8906 cv
61.2539 15.648 61.3213 8.60059 61.1293 8.53595 cv
61.0458 8.50757 60.8881 8.70221 60.7765 8.97089 cv
cp
60.7126 11.9641 mo
60.7553 12.1337 60.758 12.6419 60.7198 13.1021 cv
60.6506 13.9337 li
60.1972 13.9726 li
59.483 14.0343 59.4092 13.8057 59.8075 12.7698 cv
59.9942 12.2836 60.1935 11.8124 60.2506 11.7206 cv
60.4015 11.4781 60.6202 11.593 60.7126 11.9641 cv
f
35.4721 9.7514 mo
34.9933 9.94165 34.5799 10.1654 34.5523 10.2503 cv
34.5054 10.3934 34.5998 10.6595 35.9727 14.2535 cv
36.3634 15.2771 36.7549 16.3091 36.8459 16.5558 cv
37.0249 17.0421 37.3661 17.2101 37.4957 16.8758 cv
37.5399 16.7621 37.3424 16.0443 37.0526 15.2641 cv
36.7628 14.4839 36.5298 13.7516 36.5298 13.6205 cv
36.5298 13.4542 36.7064 13.3222 37.1221 13.1777 cv
37.8273 12.932 38.2934 12.5153 38.2934 12.1303 cv
38.2934 11.8384 37.7897 10.4033 37.4625 9.76373 cv
37.3038 9.45306 37.1974 9.3938 36.8069 9.3996 cv
36.5502 9.40302 35.9504 9.56116 35.4721 9.7514 cv
cp
37.236 10.6466 mo
37.2764 10.8331 37.39 11.2094 37.4838 11.465 cv
37.7034 12.0663 37.6169 12.2819 37.0841 12.4609 cv
36.3659 12.7021 36.1266 12.5953 35.7957 11.887 cv
35.6284 11.5291 35.4888 11.0787 35.4782 10.8638 cv
35.4608 10.5107 35.5096 10.4635 36.089 10.2719 cv
36.8196 10.0303 37.1245 10.1298 37.236 10.6466 cv
f
64.3874 9.68738 mo
64.2074 9.91016 63.7523 11.2222 62.7237 14.4839 cv
62.3164 15.776 62.2224 16.2206 62.3322 16.3321 cv
62.4331 16.4344 62.5194 16.4364 62.6155 16.3386 cv
62.7613 16.1908 63.5651 13.9854 63.7715 13.1664 cv
63.8423 12.8851 63.9792 12.5687 64.0749 12.4629 cv
64.436 12.0677 64.5109 12.5652 64.437 14.8678 cv
64.3758 16.7862 64.3922 17.0907 64.5616 17.1575 cv
64.6748 17.202 64.8172 17.1725 64.9017 17.0869 cv
64.9814 17.0062 65.3674 15.9741 65.7582 14.7973 cv
66.149 13.6205 66.6458 12.1766 66.8604 11.593 cv
67.1944 10.6849 67.2235 10.5206 67.0616 10.4567 cv
66.753 10.3338 66.5603 10.647 66.1401 11.9514 cv
65.6959 13.3328 65.2938 14.0955 65.1094 13.9083 cv
65.0468 13.8447 64.9872 12.9362 64.976 11.8874 cv
64.953 9.71271 64.8076 9.16766 64.3874 9.68738 cv
f
68.9386 11.396 mo
68.8623 11.4272 68.451 12.1813 68.0225 13.0769 cv
66.8656 15.4941 66.5166 16.1781 66.1032 16.8372 cv
65.8951 17.1699 65.7456 17.5356 65.7692 17.656 cv
65.8181 17.9072 67.5784 18.8582 67.9938 18.8582 cv
68.3493 18.8582 68.5388 18.5512 70.0937 15.4557 cv
71.5464 12.5649 71.5461 12.5974 70.0975 11.8029 cv
69.1781 11.2988 69.1781 11.2988 68.9386 11.396 cv
cp
70.1728 12.7265 mo
70.3744 12.8701 70.5383 13.0704 70.5383 13.1727 cv
70.5383 13.2744 70.2563 13.8762 69.9148 14.5031 cv
69.5733 15.1296 69.057 16.1282 68.7739 16.7096 cv
68.0817 18.1293 68.0574 18.1502 67.4018 17.8908 cv
67.1123 17.7761 66.8262 17.589 66.7694 17.4771 cv
66.6647 17.2693 67.0124 16.4536 67.9527 14.7016 cv
68.145 14.3433 68.44 13.7804 68.6237 13.4225 cv
68.8072 13.0641 68.9994 12.7151 69.061 12.6292 cv
69.2373 12.3843 69.7571 12.4294 70.1728 12.7265 cv
f
28.8842 12.9728 mo
28.3175 13.3246 27.8176 13.6716 27.7758 13.7421 cv
27.7341 13.8125 27.9109 14.2023 28.1703 14.6119 cv
28.8185 15.6351 30.6122 18.723 30.6221 18.8328 cv
30.642 19.0504 31.4609 20.076 31.6429 20.1113 cv
31.7606 20.1342 31.8783 20.0418 31.9262 19.8882 cv
31.9844 19.7017 31.8054 19.2869 31.3089 18.4554 cv
30.927 17.8158 30.6098 17.1923 30.6098 17.0804 cv
30.6098 16.9672 30.975 16.6503 31.4286 16.3704 cv
32.0456 15.9896 32.2472 15.7928 32.2472 15.5711 cv
32.2472 15.1385 31.8567 15.1885 30.9876 15.7329 cv
30.5849 15.9847 30.1639 16.1668 30.0681 16.1302 cv
29.8204 16.0347 28.8209 14.2792 28.8688 14.0234 cv
28.8914 13.9032 29.174 13.6644 29.5014 13.4896 cv
30.257 13.0853 30.5427 12.7983 30.4456 12.5396 cv
30.3189 12.2025 29.9675 12.3001 28.8842 12.9728 cv
f
48.8104 14.8408 mo
48.6027 14.8696 47.8659 14.9565 47.173 15.0331 cv
36.9833 16.1637 27.917 21.8054 22.2992 30.5114 cv
19.7003 34.5386 17.6338 40.0917 16.9491 44.8885 cv
16.6189 47.2007 16.6161 51.3477 16.9429 53.7142 cv
17.1989 55.5693 17.5513 57.4001 17.8172 58.2551 cv
17.9811 58.7828 18.2587 59.6749 18.4342 60.2378 cv
19.4823 63.5974 20.5591 65.7635 23.0318 69.4859 cv
24.0033 70.9484 26.3528 73.5089 28.2796 75.2056 cv
28.7584 75.6268 29.3809 76.1784 29.6652 76.4326 cv
31.6636 78.2196 36.1395 80.631 39.7167 81.8471 cv
43.2998 83.0653 46.5307 83.5814 50.574 83.5814 cv
52.8034 83.5814 55.4872 83.4284 55.9273 83.2761 cv
56.0306 83.2398 56.3557 83.1803 56.6452 83.1433 cv
57.5194 83.0324 60.4366 82.2772 61.6582 81.8454 cv
63.5854 81.1644 64.2347 80.8855 66.1296 79.9233 cv
70.0217 77.9471 73.1593 75.5666 76.1435 72.3256 cv
80.888 67.1722 83.9041 60.5961 84.8598 53.318 cv
85.1571 51.0541 85.1517 46.8315 84.8489 44.8245 cv
84.173 40.3477 83.3063 37.5088 81.4742 33.7732 cv
78.8773 28.4778 75.0605 24.0998 70.0971 20.723 cv
65.564 17.6389 60.8897 15.8626 55.2343 15.0749 cv
53.8994 14.8887 49.5903 14.7319 48.8104 14.8408 cv
cp
54.4785 15.2952 mo
58.3582 15.6747 62.7875 16.9548 66.2429 18.6949 cv
77.8011 24.5152 85.0257 36.472 84.8909 49.5573 cv
84.8362 54.8911 83.565 59.978 81.0714 64.8427 cv
79.0388 68.8076 76.4279 72.0533 72.6795 75.2747 cv
70.4621 77.18 65.8652 79.8415 62.792 80.9991 cv
58.83 82.4911 55.285 83.1337 51.0147 83.1337 cv
47.8157 83.1337 46.7446 83.0482 44.503 82.6133 cv
35.5221 80.8708 27.7746 75.6743 22.6992 67.9891 cv
20.3464 64.4266 18.9184 61.082 17.9424 56.8481 cv
17.5417 55.1087 17.0664 51.7351 17.1554 51.2584 cv
17.1931 51.0562 18.827 51.0428 40.7686 51.0664 cv
59.498 51.0869 64.367 51.0596 64.467 50.9323 cv
64.5576 50.8176 64.3626 50.2863 63.7744 49.0457 cv
63.3251 48.0989 62.5405 46.4232 62.0361 45.3361 cv
61.5316 44.249 60.71 42.487 60.216 41.4348 cv
59.7177 40.3733 59.2052 39.282 59.0679 38.9919 cv
58.6087 38.0197 58.7921 37.9256 59.731 38.6507 cv
61.068 39.6832 63.0339 42.4456 63.7053 44.2363 cv
63.9164 44.7992 64.1487 45.2796 64.2213 45.3043 cv
64.2935 45.3289 64.8892 45.0931 65.5311 44.7863 cv
66.1738 44.4796 66.8349 44.1826 66.9862 44.1329 cv
67.3616 44.0104 67.3386 43.8144 66.799 42.5352 cv
65.8002 40.1687 64.4926 38.2737 62.6783 36.5634 cv
62.0107 35.9337 61.4694 35.3517 61.4694 35.2633 cv
61.4694 35.1748 61.6542 34.8989 61.8848 34.6429 cv
62.289 34.1954 62.3109 34.1882 62.6656 34.3778 cv
63.1481 34.6352 65.29 36.8559 66.0185 37.8538 cv
67.2137 39.4908 68.127 41.0923 68.7029 42.5606 cv
68.9251 43.1273 69.115 43.1526 69.9841 42.7317 cv
70.3263 42.5661 71.0356 42.228 71.5773 41.9723 cv
72.1191 41.7171 72.5837 41.4324 72.6214 41.3329 cv
72.7641 40.9584 71.2608 37.8285 70.1336 36.1528 cv
69.2217 34.7966 66.6108 31.8976 65.7135 31.2444 cv
65.062 30.7701 65.061 30.6014 65.7047 29.8723 cv
66.0321 29.5012 66.3894 29.2196 66.5324 29.2196 cv
66.8257 29.2196 69.3356 31.6629 70.4095 32.9933 cv
71.5537 34.4106 72.9338 36.5617 73.651 38.0457 cv
74.5592 39.9237 74.9431 40.9619 75.686 43.5457 cv
75.7675 43.8298 75.8407 43.8633 76.3444 43.8455 cv
77.1886 43.8157 80.7265 43.0951 80.9041 42.9172 cv
81.0091 42.8121 80.8866 42.1387 80.5047 40.7189 cv
79.6342 37.4828 77.4247 33.1596 74.9876 29.9235 cv
73.8683 28.4374 71.0545 25.6729 69.4674 24.5005 cv
68.6992 23.9328 67.9361 23.3627 67.7544 23.2211 cv
67.2856 22.8546 64.2528 21.2449 63.0311 20.7138 cv
61.0157 19.8378 57.4203 18.7766 55.6755 18.5425 cv
55.2973 18.4923 54.8682 18.4259 54.7306 18.3968 cv
53.7417 18.1887 51.3929 18.0693 49.5663 18.1347 cv
47.5915 18.2052 45.1706 18.5481 42.8905 19.0805 cv
40.9079 19.5432 37.2102 21.1036 35.0814 22.3758 cv
34.2122 22.8953 32.2357 24.3427 31.3782 25.088 cv
30.8845 25.5172 30.9121 25.8385 31.4539 25.962 cv
34.9551 26.7599 38.4334 28.7974 41.2517 31.7015 cv
42.5558 33.045 43.1441 33.8762 44.1327 35.7692 cv
44.881 37.2015 45.163 37.9777 45.4025 39.2612 cv
45.7009 40.8602 45.6574 42.3563 45.2797 43.5078 cv
44.8136 44.9276 44.5354 45.4063 43.6591 46.296 cv
42.1825 47.7947 40.0065 48.501 37.2858 48.3645 cv
35.0705 48.253 33.9604 48.0099 31.4288 47.082 cv
29.8599 46.5067 28.8844 46.3339 27.2093 46.3339 cv
25.9751 46.3339 25.4689 46.3886 24.8663 46.5885 cv
23.8463 46.9269 22.7321 47.5077 21.982 48.0914 cv
20.9113 48.9256 20.09 49.4065 19.2739 49.6765 cv
18.3544 49.981 17.3624 50.021 17.1502 49.7616 cv
16.975 49.5478 17.1664 45.9247 17.4548 43.9934 cv
17.7074 42.3046 18.3062 39.847 18.7859 38.5316 cv
19.0005 37.9431 19.2451 37.2415 19.3348 36.9583 cv
19.8522 35.3178 21.5197 32.0338 22.8022 30.1277 cv
24.1132 28.1793 25.0036 27.1087 27.0266 25.0497 cv
28.7731 23.2717 30.2562 22.0388 31.6807 21.1805 cv
32.1718 20.8849 32.9167 20.4229 33.3622 20.1379 cv
33.803 19.8556 34.1845 19.6263 34.2126 19.6263 cv
34.2403 19.6263 34.6848 19.3673 35.2012 19.0507 cv
35.7176 18.7339 36.1908 18.4752 36.2531 18.4752 cv
36.315 18.4752 36.9333 18.2223 37.6132 17.9188 cv
38.302 17.6116 39.4525 17.1735 40.1831 16.9401 cv
40.9133 16.7071 41.8437 16.4094 42.2612 16.2749 cv
43.3689 15.919 46.2036 15.4122 47.8033 15.2846 cv
49.5537 15.1446 52.9965 15.1501 54.4785 15.2952 cv
f
74.8208 15.0722 mo
74.8208 15.1628 74.9666 15.3983 75.1418 15.5903 cv
75.4453 15.9229 75.4525 15.9572 75.2677 16.2169 cv
75.1586 16.3712 74.9786 16.6326 74.8585 16.8116 cv
74.7401 16.9888 74.4057 17.4511 74.1094 17.8477 cv
72.9063 19.4594 71.7818 21.2042 71.8427 21.3651 cv
71.9409 21.6255 72.2184 21.5827 72.5056 21.2628 cv
72.7681 20.9705 74.7736 18.142 75.0094 17.7327 cv
75.2814 17.2595 75.8522 16.5707 76.0298 16.5016 cv
76.1348 16.4609 76.4202 16.5135 76.6721 16.6206 cv
77.491 16.968 77.6062 16.5029 76.836 15.9606 cv
76.5462 15.7563 76.1204 15.4421 75.8659 15.2447 cv
75.3875 14.8727 74.8208 14.7793 74.8208 15.0722 cv
f
25.723 15.2836 mo
25.219 15.4869 24.1862 16.4368 24.1862 16.6965 cv
24.1862 17.0125 24.8295 18.1037 25.5731 19.0501 cv
25.905 19.4724 26.406 20.1342 26.6863 20.5212 cv
26.9645 20.9052 27.3799 21.4749 27.6002 21.7747 cv
28.0886 22.4399 28.4796 22.5665 29.0607 22.2479 cv
29.7157 21.889 30.4838 21.1087 30.4838 20.8025 cv
30.4838 20.6451 30.3011 20.3101 30.0684 20.0415 cv
29.8354 19.7728 29.5709 19.4378 29.4669 19.2804 cv
29.0285 18.6152 26.9309 15.9027 26.5795 15.5455 cv
26.1507 15.1109 26.1507 15.1109 25.723 15.2836 cv
cp
26.6613 16.5881 mo
26.8419 16.8823 27.1564 17.3372 27.347 17.5794 cv
29.8614 20.7772 29.8067 20.6735 29.2495 21.1765 cv
28.5262 21.829 28.6015 21.89 26.2386 18.7432 cv
25.5276 17.7967 24.9418 16.9183 24.9418 16.7989 cv
24.9418 16.5378 25.6597 16.0505 26.0501 16.0471 cv
26.2458 16.045 26.4255 16.2042 26.6613 16.5881 cv
f
78.1572 18.142 mo
77.8602 18.5201 75.225 21.4804 74.3996 22.3629 cv
74.0762 22.7085 73.8134 23.0244 73.8134 23.0665 cv
73.8134 23.1483 74.9218 24.2614 75.5891 24.8499 cv
75.8916 25.1165 75.9337 25.122 76.1369 24.9214 cv
76.3453 24.7161 76.3138 24.659 75.5764 23.9044 cv
75.1518 23.4696 74.8154 23.0466 74.8393 22.9771 cv
74.917 22.7499 76.1181 21.4041 76.3572 21.2758 cv
76.6198 21.1354 77.1867 21.4804 77.7017 22.0942 cv
78.0344 22.4909 78.4409 22.5576 78.5582 22.2349 cv
78.6144 22.0809 78.4293 21.8178 77.9256 21.3333 cv
77.5351 20.9579 77.2138 20.5393 77.2138 20.4059 cv
77.2138 20.2724 77.4752 19.8687 77.7935 19.5107 cv
78.2704 18.9734 78.4474 18.8582 78.7947 18.8582 cv
79.1417 18.8582 79.3008 18.9605 79.6892 19.4337 cv
80.1716 20.0223 80.5624 20.1657 80.6997 19.8047 cv
80.7996 19.5412 79.04 17.8429 78.6623 17.8381 cv
78.5192 17.8368 78.2876 17.9757 78.1572 18.142 cv
f
20.3194 20.0223 mo
20.1914 20.1523 20.6387 21.1098 21.2275 21.9666 cv
21.7149 22.676 21.2009 22.738 19.9539 22.1207 cv
19.2107 21.7521 18.8671 21.7186 18.6454 21.9923 cv
18.4435 22.2411 18.5308 22.3212 19.3996 22.6863 cv
19.7808 22.8461 20.4326 23.1383 20.8481 23.3354 cv
21.2638 23.5322 21.8025 23.7768 22.0447 23.8788 cv
22.4198 24.0366 22.5891 24.2692 23.1784 25.4331 cv
23.5603 26.1879 23.9446 26.8641 24.0349 26.941 cv
24.2166 27.0954 24.5639 26.8531 24.5639 26.5715 cv
24.5639 26.4045 23.1788 23.9877 22.8557 23.591 cv
22.7695 23.4853 22.3766 22.7982 21.9784 22.056 cv
21.2296 20.6619 20.7201 19.8817 20.5586 19.8817 cv
20.5035 19.8817 20.3946 19.9457 20.3194 20.0223 cv
f
81.5217 21.8507 mo
81.264 22.0848 80.2117 22.9875 79.1664 23.8716 cv
77.0126 25.6931 76.7728 25.9372 76.8781 26.2006 cv
76.9171 26.2988 77.2505 26.7892 77.6172 27.2878 cv
78.0967 27.94 78.3557 28.187 78.5363 28.1648 cv
78.9792 28.1104 78.895 27.7097 78.2965 27.0192 cv
77.3917 25.9758 77.2015 26.2602 80.892 23.1387 cv
82.1893 22.0413 82.4764 21.7402 82.3614 21.5958 cv
82.1554 21.3384 82.0507 21.3703 81.5217 21.8507 cv
f
16.6979 24.5759 mo
16.2429 25.1901 15.8901 25.7458 15.9106 25.8167 cv
15.9311 25.8865 16.043 26.0029 16.1563 26.0726 cv
16.3168 26.1711 16.4461 26.1216 16.7229 25.855 cv
16.9245 25.6609 17.162 25.5098 17.2646 25.5098 cv
17.3659 25.5098 17.964 25.8943 18.606 26.3727 cv
19.2486 26.8518 20.0514 27.4359 20.4073 27.684 cv
20.7656 27.9335 21.3395 28.3458 21.7046 28.6155 cv
22.3975 29.1271 22.7657 29.2115 22.8838 28.8865 cv
22.9655 28.6613 22.8255 28.5245 21.7299 27.7552 cv
21.377 27.5078 20.8453 27.1273 20.5206 26.8908 cv
20.2041 26.6602 19.4184 26.1004 18.7887 25.6569 cv
18.1591 25.2127 17.6362 24.7747 17.6362 24.6909 cv
17.6362 24.6101 17.7215 24.4223 17.8155 24.2943 cv
18.1225 23.8785 18.0013 23.4631 17.5732 23.4631 cv
17.5456 23.4631 17.1531 23.962 16.6979 24.5759 cv
f
84.3304 25.2983 mo
83.9803 25.5778 83.4362 25.9655 81.6853 27.1819 cv
81.3198 27.4359 80.9407 27.7124 80.8476 27.7928 cv
80.7538 27.8739 80.3819 28.1805 80.0164 28.4772 cv
79.6513 28.7739 79.3553 29.0887 79.3553 29.1807 cv
79.3553 29.3904 80.0061 30.5621 80.3928 31.0484 cv
80.5862 31.2914 80.7466 31.3793 80.8917 31.3221 cv
81.2223 31.1921 81.1723 30.9714 80.6172 30.1016 cv
80.3397 29.6667 80.1108 29.2366 80.1108 29.1486 cv
80.1108 29.0613 80.5519 28.6938 81.0809 28.34 cv
82.2016 27.5899 82.2834 27.6036 82.9715 28.6562 cv
83.2562 29.0911 83.5122 29.347 83.6628 29.347 cv
84.0981 29.347 84.0385 28.9887 83.4602 28.1319 cv
83.1409 27.6587 82.8819 27.2292 82.8819 27.1724 cv
82.8819 27.0581 83.9023 26.2776 84.3807 26.0257 cv
84.8057 25.8022 85.1428 26.0216 85.5742 26.8015 cv
85.9705 27.518 86.2197 27.682 86.4883 27.4027 cv
86.6385 27.2471 86.5666 27.0831 85.9343 26.1366 cv
85.139 24.9472 84.9163 24.8305 84.3304 25.2983 cv
f
14.7393 27.4859 mo
14.6558 27.5882 14.6229 27.7289 14.666 27.7993 cv
14.8525 28.1063 20.6493 31.545 20.8987 31.4967 cv
21.0123 31.4745 21.1002 31.3489 21.1002 31.2082 cv
21.1002 31.0211 20.3443 30.5016 18.0769 29.1298 cv
16.4143 28.1237 15.0175 27.3005 14.9723 27.3005 cv
14.9272 27.3005 14.8228 27.3836 14.7393 27.4859 cv
f
85.9048 29.7722 mo
83.9273 30.8056 81.9361 31.9433 81.6476 32.2044 cv
81.4721 32.3636 81.3705 32.5962 81.3705 32.8392 cv
81.3705 33.3764 82.0973 34.5843 82.4788 34.6812 cv
82.9199 34.7931 84.3934 34.0253 84.3934 33.6833 cv
84.3934 33.36 84.2551 33.373 83.5115 33.7662 cv
83.0455 34.0125 82.8392 34.0625 82.6677 33.9698 cv
82.3652 33.8062 81.9416 33.001 82.0323 32.7622 cv
82.1527 32.444 86.5851 29.9867 87.0385 29.9867 cv
87.3451 29.9867 87.8149 30.6902 87.7646 31.0738 cv
87.7454 31.2199 87.5045 31.4567 87.2024 31.6261 cv
86.6608 31.9297 86.5078 32.2401 86.8369 32.3677 cv
87.1144 32.4747 88.2892 31.8027 88.4503 31.4448 cv
88.5804 31.157 88.5514 31.0228 88.2376 30.447 cv
87.791 29.6284 87.433 29.2191 87.1645 29.2191 cv
87.0543 29.2191 86.4841 29.4697 85.9048 29.7722 cv
f
13.2644 30.025 mo
12.836 30.6645 12.5704 31.3992 12.6498 31.7263 cv
12.7515 32.1422 13.1772 32.5172 13.9707 32.8884 cv
14.7888 33.2717 15.117 33.2381 16.6534 32.6154 cv
17.8877 32.1151 18.0065 32.0993 18.7066 32.3447 cv
19.3365 32.5654 19.5925 32.8943 19.3509 33.1715 cv
19.2538 33.2833 19.1347 33.504 19.0892 33.6577 cv
18.9636 34.0803 18.5806 34.1429 18.0013 33.8353 cv
17.7242 33.6881 17.3899 33.568 17.2581 33.568 cv
16.9433 33.568 16.7006 34.0057 16.918 34.1819 cv
17.2537 34.455 18.3162 34.8471 18.7192 34.8471 cv
19.0816 34.8471 19.1949 34.7704 19.4553 34.3482 cv
19.9214 33.5937 20.1072 33.0338 20.0332 32.6086 cv
19.9795 32.3016 19.8149 32.1431 19.2103 31.8153 cv
18.7949 31.5905 18.31 31.4033 18.1334 31.3999 cv
17.9565 31.3961 17.1952 31.6494 16.4396 31.9628 cv
15.1044 32.5165 15.0545 32.5264 14.6195 32.3337 cv
14.3677 32.2222 14.0624 32.0918 13.9204 32.0361 cv
13.4034 31.8318 13.3418 31.6241 13.6281 31.0485 cv
13.7743 30.7542 13.9608 30.4853 14.0401 30.4537 cv
14.1178 30.4227 14.4115 30.4846 14.6763 30.5875 cv
15.3816 30.8627 15.7878 30.8671 15.8401 30.6006 cv
15.874 30.427 15.6837 30.2751 15.0667 29.9836 cv
13.9961 29.4781 13.6254 29.4864 13.2644 30.025 cv
f
88.2981 33.7025 mo
87.9204 33.8384 87.4998 34.0129 87.3725 34.0861 cv
87.2449 34.1597 86.3774 34.5046 85.4579 34.8471 cv
84.5385 35.1901 83.6337 35.5681 83.4616 35.6818 cv
82.9825 35.9979 82.9347 36.5102 83.3066 37.3414 cv
83.7747 38.3892 84.0033 38.4391 85.59 37.8413 cv
86.286 37.5792 87.4416 37.1566 88.1725 36.8976 cv
90.6411 36.0212 90.7098 35.9202 89.9232 34.3225 cv
89.608 33.683 89.3504 33.4144 89.079 33.4435 cv
89.0311 33.449 88.6762 33.5663 88.2981 33.7025 cv
cp
89.3562 34.4954 mo
89.4523 34.6525 89.5649 34.9751 89.6039 35.2054 cv
89.6836 35.6787 89.6836 35.6787 87.7314 36.4061 cv
84.4817 37.6165 84.2787 37.6695 84.0375 37.3674 cv
83.8028 37.0731 83.6443 36.2618 83.8017 36.1588 cv
84.1288 35.9449 88.6355 34.2319 88.9027 34.2202 cv
89.0626 34.213 89.2542 34.3294 89.3562 34.4954 cv
f
11.7037 34.0201 mo
11.3748 34.2039 11.0573 34.7448 10.8951 35.3974 cv
10.8475 35.589 10.7589 35.7748 10.6959 35.8145 cv
10.4827 35.95 10.5826 36.3771 10.8725 36.5694 cv
11.0251 36.6707 12.0814 37.0687 13.2277 37.4568 cv
14.3737 37.8447 15.8089 38.3382 16.4269 38.5565 cv
17.4096 38.9042 17.5712 38.9295 17.7368 38.7611 cv
18.0879 38.4049 17.7998 38.1942 16.326 37.7274 cv
15.0287 37.3168 14.8652 37.2319 14.8652 36.9708 cv
14.8652 36.8045 14.9747 36.5763 15.117 36.4462 cv
15.323 36.258 15.4195 36.2419 15.646 36.3576 cv
16.0614 36.5698 18.3928 36.8161 18.543 36.6639 cv
18.6111 36.5948 18.6487 36.4271 18.6248 36.2994 cv
18.5872 36.0968 18.3792 36.0404 17.1952 35.9093 cv
16.4269 35.8241 15.7141 35.7529 15.5954 35.7491 cv
15.4743 35.7457 15.3436 35.615 15.2942 35.4488 cv
15.1885 35.0905 14.7478 34.5915 14.5374 34.5915 cv
14.448 34.5915 14.1845 34.5112 13.958 34.4139 cv
13.3914 34.172 12.3138 33.823 12.1567 33.8309 cv
12.0893 33.8339 11.8799 33.9212 11.7037 34.0201 cv
cp
13.3917 34.9923 mo
13.8704 35.1449 14.2893 35.3499 14.3234 35.4484 cv
14.3577 35.5449 14.3142 35.8898 14.2294 36.1968 cv
14.1055 36.6447 14.0155 36.7648 13.8071 36.76 cv
13.4673 36.7522 11.857 36.1923 11.6913 36.024 cv
11.6062 35.9377 11.6362 35.7044 11.7823 35.3077 cv
12.0383 34.6148 12.1444 34.5943 13.3917 34.9923 cv
f
90.3133 37.8085 mo
90.0741 37.8745 89.7285 37.9608 89.5577 37.9971 cv
89.016 38.1124 85.1192 39.0637 84.6199 39.2026 cv
84.1162 39.3426 84.0423 39.4641 84.3178 39.6974 cv
84.4417 39.8021 84.9348 39.7258 86.3456 39.384 cv
88.5247 38.8553 88.849 38.8813 88.1089 39.5253 cv
87.6935 39.887 87.6384 39.9863 87.7941 40.092 cv
87.8985 40.1624 88.229 40.2196 88.5308 40.2196 cv
88.8963 40.2196 89.0619 40.271 89.0287 40.3732 cv
88.9709 40.5481 88.7388 40.6189 86.4086 41.1719 cv
85.0987 41.4829 84.6986 41.6253 84.6665 41.793 cv
84.6004 42.1345 84.8844 42.0955 88.2351 41.305 cv
90.0487 40.8769 91.3155 40.6035 91.4849 40.6035 cv
91.591 40.6035 91.746 40.5139 91.8388 40.3989 cv
92.1183 40.0526 91.6105 39.7641 90.5651 39.6755 cv
89.4821 39.5835 89.3435 39.5106 89.6324 39.1837 cv
89.7456 39.0561 89.9013 38.9405 89.9609 38.9405 cv
90.071 38.9405 90.6534 38.5569 91.0945 38.1938 cv
91.3464 37.9864 91.2581 37.6559 90.9559 37.6747 cv
90.8464 37.6812 90.5528 37.7425 90.3133 37.8085 cv
f
10.1672 38.2068 mo
9.86473 38.4357 9.28675 40.8763 9.48692 41.0778 cv
9.57048 41.1616 10.8222 41.4904 12.2833 41.8121 cv
13.7445 42.1334 15.0975 42.4459 15.3062 42.5099 cv
16.0745 42.745 16.5909 42.7822 16.7226 42.6115 cv
16.8694 42.4219 17.3844 40.3602 17.3844 39.964 cv
17.3844 39.58 17.0121 39.4815 16.7582 39.7976 cv
16.6466 39.9373 16.4759 40.4372 16.3831 40.8978 cv
16.2904 41.3581 16.1443 41.7687 16.0618 41.8002 cv
15.8856 41.8686 13.9813 41.3994 13.8197 41.2482 cv
13.7644 41.1962 13.8061 40.8081 13.9125 40.3859 cv
14.1835 39.3114 14.1654 38.9747 13.8324 38.8694 cv
13.4752 38.7563 13.2835 39.0301 13.174 39.8104 cv
13.0444 40.7315 12.9728 40.9648 12.7997 41.0323 cv
12.5601 41.1257 10.5652 40.6617 10.4598 40.4882 cv
10.3726 40.3445 10.4358 39.9253 10.7133 38.8125 cv
10.7838 38.5312 10.7732 38.319 10.684 38.2116 cv
10.5142 38.0074 10.4318 38.0067 10.1672 38.2068 cv
f
88.7388 42.5948 mo
85.4391 42.9811 85.0942 43.0471 85.0487 43.3024 cv
84.9874 43.6436 85.3509 43.6775 86.9506 43.4787 cv
89.4315 43.1703 89.929 43.248 88.8271 43.7715 cv
88.5753 43.8914 88.3608 44.0515 88.3608 44.1206 cv
88.3608 44.1897 88.6191 44.3105 88.9216 44.3831 cv
89.2237 44.4556 89.5026 44.5822 89.5266 44.6582 cv
89.5724 44.8046 89.2679 44.8707 87.8571 45.0209 cv
85.5144 45.2704 85.1619 45.3781 85.3194 45.7967 cv
85.3861 45.9753 85.5082 45.9992 85.9993 45.9308 cv
86.3302 45.8849 87.4417 45.7597 88.487 45.6509 cv
91.7492 45.3115 92.5037 45.1745 92.5543 44.9138 cv
92.6268 44.5412 92.3538 44.3499 91.6106 44.2527 cv
90.792 44.1452 90.3133 43.9882 90.3133 43.827 cv
90.3133 43.7637 90.7417 43.5029 91.2581 43.2514 cv
91.976 42.9014 92.2028 42.7292 92.2028 42.5349 cv
92.2028 42.2033 92.0643 42.2057 88.7388 42.5948 cv
f
8.85834 42.8545 mo
8.81524 42.9698 8.85869 43.1292 8.95794 43.2193 cv
9.05509 43.3069 10.1672 43.6306 11.4268 43.9375 cv
14.3867 44.6592 14.4299 44.7663 11.7793 44.8084 cv
9.09652 44.8509 8.41832 45.0049 8.61025 45.5276 cv
8.66465 45.6762 8.83197 45.7053 9.34838 45.6556 cv
9.71857 45.6201 10.6333 45.5639 11.4015 45.5291 cv
16.0868 45.3176 16.2552 45.3018 16.38 45.0671 cv
16.4482 44.9395 16.4744 44.7602 16.4396 44.6644 cv
16.4015 44.5603 15.4068 44.2462 13.9457 43.8759 cv
11.3259 43.2125 11.1158 43.1563 10.0916 42.8517 cv
9.23511 42.5971 8.95487 42.5975 8.85834 42.8545 cv
f
8.56747 46.9352 mo
8.44291 47.0884 8.43064 47.2164 8.52578 47.3701 cv
8.66813 47.6006 10.4191 47.7026 14.2355 47.7026 cv
16.1877 47.7026 li
16.2318 47.4019 li
16.2561 47.2355 16.2281 47.0556 16.1688 46.9991 cv
16.11 46.9427 14.4182 46.8564 12.4027 46.8072 cv
9.04008 46.725 8.72971 46.735 8.56747 46.9352 cv
f
92.1902 46.7969 mo
92.1628 46.8232 90.7608 46.8715 89.0855 46.903 cv
86.0876 46.9594 86.025 46.9659 85.7163 47.2547 cv
85.4443 47.509 85.4015 47.6579 85.4015 48.3484 cv
85.4015 49.0776 85.4357 49.1771 85.7916 49.4803 cv
86.182 49.8129 li
89.4947 49.8129 li
92.9584 49.8129 93.0751 49.7935 92.8092 49.2631 cv
92.7035 49.0512 92.543 49.0383 90.8423 49.1019 cv
87.6808 49.2203 86.4746 49.2264 86.3079 49.1248 cv
86.2203 49.0714 86.1571 48.745 86.1571 48.3484 cv
86.1571 47.7471 86.1916 47.6565 86.4404 47.6003 cv
86.5964 47.5651 88.0777 47.5278 89.7401 47.5172 cv
91.4028 47.5066 92.802 47.4689 92.8575 47.4333 cv
93.0173 47.3314 92.9834 47.1671 92.7568 46.9413 cv
92.5679 46.7528 92.3048 46.6857 92.1902 46.7969 cv
f
12.3336 48.7194 mo
12.3059 48.7512 11.4898 48.7899 10.5197 48.8052 cv
8.65544 48.8354 8.31564 48.91 8.31564 49.2888 cv
8.31564 49.6255 8.5928 49.6936 9.68851 49.6259 cv
12.8626 49.4297 13.0823 49.4253 13.1672 49.5573 cv
13.261 49.7035 13.1648 49.7438 11.2126 50.3858 cv
10.4191 50.6466 9.5848 50.9429 9.36755 51.0411 cv
9.15327 51.1376 8.87786 51.2201 8.76906 51.2201 cv
8.46684 51.2201 8.26124 51.7064 8.46035 51.9493 cv
8.58764 52.1043 8.81312 52.1265 9.63201 52.0646 cv
10.1894 52.0222 11.7796 51.9565 13.1651 51.9175 cv
14.5507 51.8784 15.786 51.8172 15.9109 51.7806 cv
16.1627 51.707 16.2171 51.1047 15.9739 51.0822 cv
15.8831 51.0736 14.9849 51.0753 13.9648 51.086 cv
12.8565 51.0979 12.0893 51.0544 12.0441 50.9774 cv
12.0014 50.9053 12.0945 50.8115 12.258 50.7615 cv
13.4419 50.4019 15.7267 49.4995 15.9109 49.3196 cv
16.0495 49.1837 16.1055 49.0126 16.0556 48.8799 cv
15.9845 48.6906 15.7408 48.6622 14.179 48.6622 cv
13.1963 48.6619 12.361 48.6879 12.3336 48.7194 cv
f
85.3974 51.0281 mo
85.1024 51.3936 85.4641 51.4901 87.3663 51.554 cv
89.3815 51.6218 89.6005 51.6536 89.53 51.8723 cv
89.4863 52.0085 86.1947 53.0019 85.7666 53.008 cv
85.6516 53.0094 85.4628 53.1258 85.3258 53.2794 cv
85.0863 53.548 85.0863 53.548 85.332 53.727 cv
85.4915 53.843 85.9114 53.9083 86.5287 53.9128 cv
87.0505 53.9162 88.588 53.9709 89.9358 54.0343 cv
91.8881 54.1256 92.4256 54.1151 92.556 53.9829 cv
93.0385 53.4926 92.2155 53.2667 89.9485 53.2667 cv
88.9914 53.2667 88.369 53.1377 88.5507 52.9769 cv
88.5855 52.9461 89.1174 52.7935 89.7469 52.6334 cv
90.377 52.4735 91.0152 52.2914 91.1828 52.2241 cv
91.3512 52.1566 91.6869 52.0708 91.9387 52.0311 cv
92.4424 51.9524 92.7069 51.7786 92.7069 51.527 cv
92.7069 51.1999 92.2535 51.113 90.1248 51.0325 cv
88.9408 50.9877 87.4402 50.9255 86.7678 50.8936 cv
85.7854 50.8474 85.5226 50.8731 85.3974 51.0281 cv
f
14.8022 52.7538 mo
14.525 52.811 13.7314 52.9478 13.0389 53.0583 cv
8.3659 53.8044 8.52744 53.7636 8.58832 54.1876 cv
8.62327 54.4312 8.70605 54.4791 9.07117 54.4664 cv
9.53756 54.4504 14.0969 53.7168 14.8905 53.5299 cv
15.2053 53.4556 15.4136 53.4662 15.5328 53.5627 cv
15.7846 53.7663 15.9256 54.8583 15.7216 55.0249 cv
15.5776 55.1426 11.5904 55.8499 10.0159 56.0371 cv
9.23507 56.1299 8.91717 56.2907 8.9678 56.5668 cv
9.00004 56.7406 9.14677 56.7828 9.70084 56.778 cv
10.0789 56.7742 10.6798 56.7266 11.0234 56.6733 cv
15.9735 55.8999 16.302 55.8253 16.5114 55.4287 cv
16.6691 55.13 16.5932 53.7656 16.3896 53.2411 cv
16.315 53.0495 16.0983 52.8223 15.9231 52.7524 cv
15.5646 52.609 15.5078 52.6094 14.8022 52.7538 cv
f
85.0682 54.9807 mo
84.9009 55.4284 85.099 55.532 86.4215 55.6894 cv
88.9281 55.9879 90.7619 56.2055 91.4849 56.2907 cv
92.1649 56.3705 92.2032 56.3602 92.2032 56.0998 cv
92.2032 55.9287 92.0958 55.7839 91.9195 55.7162 cv
91.7635 55.6562 90.3892 55.4519 88.8652 55.262 cv
87.341 55.0721 85.8816 54.8823 85.6218 54.8401 cv
85.2564 54.7806 85.1308 54.8125 85.0682 54.9807 cv
f
84.6675 56.8864 mo
84.4263 57.1438 84.3202 57.4877 84.1983 58.4085 cv
84.1367 58.8715 84.5953 59.3516 85.2752 59.537 cv
85.8672 59.6982 86.1571 59.6383 86.1571 59.3553 cv
86.1571 59.1093 85.9681 58.9879 85.3382 58.8294 cv
84.8472 58.7059 84.8355 58.6901 84.8728 58.2038 cv
84.9224 57.5644 85.0946 57.2318 85.3762 57.2318 cv
85.5017 57.2318 85.9367 57.3231 86.3521 57.4364 cv
86.7678 57.55 87.354 57.6882 87.6685 57.7471 cv
88.5756 57.9168 90.4779 58.389 90.805 58.5255 cv
91.0695 58.6357 91.0983 58.7154 91.0367 59.1634 cv
90.9357 59.8926 90.738 60.0829 90.1754 59.9925 cv
89.8479 59.9402 89.6628 59.9747 89.5529 60.1099 cv
89.3226 60.3929 89.5834 60.6396 90.2007 60.7238 cv
90.9183 60.8216 91.2984 60.6187 91.4473 60.0585 cv
91.8343 58.6005 91.8357 58.5847 91.5938 58.2549 cv
91.3552 57.9301 90.9685 57.8015 88.4873 57.2201 cv
85.3255 56.4789 85.0699 56.457 84.6675 56.8864 cv
f
15.3059 58.9171 mo
14.6133 59.1299 13.9727 59.3263 13.8827 59.3534 cv
13.5997 59.4382 13.5738 59.7516 13.7887 60.4935 cv
13.9666 61.1074 14.0357 61.2042 14.2732 61.1714 cv
14.513 61.1382 14.5504 61.0561 14.5504 60.5576 cv
14.5504 59.9819 li
15.3689 59.7021 li
16.5654 59.2924 16.9528 59.3445 16.9836 59.918 cv
16.9891 60.0237 17.0251 60.2249 17.063 60.3655 cv
17.101 60.5062 17.0901 60.6848 17.038 60.7622 cv
16.9158 60.9449 11.8799 62.6058 11.4515 62.6049 cv
11.1856 62.6042 11.1131 62.5142 10.9844 62.0283 cv
10.7715 61.2224 10.7715 61.2224 11.4262 61.0277 cv
12.144 60.8141 12.3706 60.5312 12.0688 60.2246 cv
11.8683 60.021 11.8042 60.0257 11.061 60.2985 cv
9.97768 60.6958 9.90892 60.7669 10.0047 61.3887 cv
10.2199 62.7828 10.6597 63.4994 11.3002 63.4994 cv
11.9302 63.4994 17.2499 61.6597 17.5979 61.3216 cv
18.0119 60.9195 17.9438 60.097 17.4134 59.0865 cv
17.0497 58.3932 17.0189 58.3907 15.3059 58.9171 cv
f
83.6378 60.4169 mo
83.6378 60.5705 83.7001 60.6852 83.7829 60.6852 cv
83.8657 60.6852 84.0221 60.7703 84.1484 60.8836 cv
84.3137 61.0322 84.3437 61.1714 84.2688 61.44 cv
84.0659 62.1692 83.9017 62.3482 83.4366 62.3482 cv
82.9955 62.3482 82.7265 62.6326 82.9579 62.8537 cv
83.0201 62.9131 83.6129 63.0576 84.2678 63.1732 cv
84.9248 63.2888 86.4784 63.5602 87.7129 63.7744 cv
89.7028 64.1198 89.9827 64.1426 90.1501 63.9726 cv
90.5001 63.6174 90.213 63.3221 88.8904 62.6788 cv
88.179 62.3328 86.8749 61.6607 85.9681 61.1724 cv
84.0659 60.1487 83.6378 60.0097 83.6378 60.4169 cv
cp
86.8243 62.2538 mo
88.6526 63.1978 88.5376 63.2657 85.9048 62.793 cv
85.2498 62.6757 84.6702 62.5148 84.624 62.4379 cv
84.5347 62.2886 84.7588 61.7005 84.9603 61.5557 cv
85.1417 61.4253 85.4264 61.5318 86.8243 62.2538 cv
f
16.8177 62.6405 mo
11.9809 64.8216 11.4562 65.0888 11.4946 65.3541 cv
11.5593 65.8002 12.0315 65.716 13.5933 64.98 cv
15.6088 64.0304 15.7802 63.9654 15.7282 64.1776 cv
15.7039 64.2765 14.9788 65.0039 14.1096 65.802 cv
13.2404 66.5999 12.4927 67.3189 12.4408 67.4072 cv
12.3877 67.4975 12.4346 67.6567 12.5478 67.7716 cv
12.7774 68.005 13.0013 67.9629 13.8577 67.5246 cv
14.1736 67.363 14.8149 67.062 15.3062 66.8446 cv
15.7946 66.6283 16.9183 66.112 17.8254 65.687 cv
19.236 65.0256 19.4629 64.8784 19.4629 64.6252 cv
19.4629 64.1715 19.148 64.2139 17.8381 64.8425 cv
16.5029 65.4834 15.2405 66.058 15.1676 66.058 cv
14.9576 66.058 15.2809 65.6935 16.2258 64.8647 cv
18.2916 63.0525 18.6426 62.6785 18.5632 62.3739 cv
18.5232 62.2202 18.4308 62.0861 18.348 62.0605 cv
18.2676 62.0359 17.5859 62.2942 16.8177 62.6405 cv
f
81.6476 64.6761 mo
81.5597 64.7658 81.4964 64.8883 81.4964 64.9705 cv
81.4964 65.1528 81.6227 65.2185 84.0789 66.3179 cv
84.354 66.4415 85.0107 66.7464 85.527 66.9914 cv
86.0434 67.2361 86.683 67.5269 86.9379 67.633 cv
87.4851 67.8606 87.4994 67.9123 87.1925 68.5648 cv
86.9821 69.0124 86.9827 69.0301 87.2212 69.2044 cv
87.3598 69.3053 87.5083 69.3833 87.5614 69.3833 cv
87.6134 69.3833 87.9508 68.7759 88.3111 68.034 cv
88.9257 66.7679 88.9527 66.6711 88.7519 66.4669 cv
88.5499 66.2619 88.5174 66.2752 88.1787 66.6971 cv
87.8201 67.1447 li
87.2783 66.9318 li
85.8552 66.3714 82.8853 65.029 82.6308 64.8308 cv
82.3279 64.5953 81.8078 64.5136 81.6476 64.6761 cv
f
19.2739 65.8862 mo
19.0344 65.9932 18.6888 66.1859 18.5181 66.3073 cv
18.3426 66.4316 17.8125 66.7461 17.3214 67.0171 cv
16.8314 67.2871 15.9359 67.7874 15.3063 68.1426 cv
14.6763 68.4977 13.9597 68.894 13.6942 69.0333 cv
13.2028 69.2913 13.0608 69.7105 13.417 69.8514 cv
13.6353 69.938 13.7949 69.8686 15.2433 69.0562 cv
15.7603 68.7661 16.7295 68.2336 17.3844 67.8798 cv
19.9289 66.5045 20.0925 66.3943 20.0925 66.0576 cv
20.0925 65.6692 19.8656 65.622 19.2739 65.8862 cv
f
80.4321 67.1643 mo
80.3876 67.2792 80.4017 67.4277 80.4636 67.4904 cv
80.6779 67.7077 86.5906 71.0464 86.7613 71.0464 cv
86.8078 71.0464 86.9211 70.9311 87.0005 70.8035 cv
87.1976 70.4856 87.0638 70.3767 85.3381 69.4501 cv
84.5802 69.0429 83.2535 68.3085 82.4096 67.8295 cv
81.5658 67.3505 80.7867 66.9535 80.6905 66.9535 cv
80.5944 66.9535 80.4766 67.049 80.4321 67.1643 cv
f
20.0422 67.4068 mo
19.8067 67.5088 18.9842 68.0132 18.2156 68.5265 cv
17.4474 69.0394 16.2644 69.8289 15.5893 70.2788 cv
14.9093 70.7319 14.3615 71.1343 14.3615 71.1805 cv
14.3615 71.2243 14.4747 71.367 14.6007 71.4817 cv
14.8745 71.731 14.6133 71.868 17.6363 69.8874 cv
20.0042 68.3359 20.3399 68.1374 20.4956 68.1966 cv
20.6701 68.2627 21.1632 69.0634 21.1632 69.281 cv
21.1632 69.4507 20.8484 69.7071 20.3068 69.9781 cv
19.828 70.2169 19.7842 70.4876 20.1935 70.6765 cv
20.4491 70.7945 20.5962 70.7527 21.1505 70.4059 cv
22.2031 69.7467 22.2808 69.3577 21.5804 68.2579 cv
20.8717 67.1447 20.7724 67.09 20.0422 67.4068 cv
f
79.2872 69.0381 mo
78.6517 69.78 78.47 70.2337 78.6268 70.6881 cv
78.7842 71.1453 83.5368 74.6278 84.0029 74.6278 cv
84.3478 74.6278 85.1602 73.7963 85.4774 73.118 cv
85.7966 72.4357 85.6403 72.163 84.4563 71.3366 cv
83.8746 70.9308 82.718 70.1235 81.8868 69.5432 cv
80.9927 68.919 80.2494 68.4879 80.067 68.4879 cv
79.8586 68.4882 79.6051 68.6672 79.2872 69.0381 cv
cp
81.3704 70.0164 mo
81.9637 70.438 82.989 71.1515 83.6692 71.6155 cv
84.3492 72.0795 84.8974 72.5333 84.8974 72.6324 cv
84.8974 72.8881 84.2592 73.8602 84.0916 73.8602 cv
84.0152 73.8602 83.4992 73.5407 82.9452 73.1502 cv
82.3874 72.7577 81.3581 72.0405 80.6402 71.5453 cv
79.9219 71.0495 79.3149 70.5752 79.2803 70.4835 cv
79.1934 70.2522 79.8593 69.2516 80.0985 69.2537 cv
80.2097 69.2547 80.7784 69.5958 81.3704 70.0164 cv
f
21.9188 70.8199 mo
18.9589 73.0763 18.1181 73.7323 17.4853 74.2787 cv
16.8681 74.8116 16.7753 74.947 16.8868 75.1523 cv
16.9566 75.2803 17.1058 75.3954 17.202 75.3954 cv
17.302 75.3954 18.1968 74.7732 19.1792 74.0204 cv
20.162 73.2679 21.4733 72.2807 22.0762 71.8396 cv
22.6808 71.3972 23.1784 70.9585 23.1784 70.8675 cv
23.1784 70.7138 22.7835 70.2686 22.662 70.2851 cv
22.6347 70.2885 22.2965 70.5318 21.9188 70.8199 cv
f
77.2217 71.4814 mo
77.0958 71.6332 77.1255 71.7328 77.365 71.9614 cv
77.8674 72.4402 79.2547 73.6416 79.834 74.0991 cv
80.363 74.5169 80.5002 74.7558 80.2117 74.7558 cv
80.0406 74.7558 77.8565 73.8805 76.8111 73.3925 cv
76.0932 73.0575 75.7027 73.0602 75.7027 73.4 cv
75.7027 73.4989 76.6725 74.4286 77.8691 75.4771 cv
81.1819 78.3792 81.2085 78.3997 81.4337 78.213 cv
81.5343 78.1291 81.6226 78.0083 81.6226 77.9532 cv
81.6226 77.845 79.4938 75.8819 78.9018 75.4446 cv
77.9981 74.7766 79.1287 75.0227 81.0556 75.9131 cv
82.5674 76.6114 82.7519 76.6658 82.9452 76.4694 cv
83.236 76.1741 83.1717 76.0092 82.5797 75.5298 cv
81.6982 74.8156 78.9689 72.459 78.3225 71.8533 cv
77.6926 71.2638 77.4653 71.1868 77.2217 71.4814 cv
f
23.5689 71.7243 mo
23.3553 71.9409 23.405 72.2578 23.6947 72.5271 cv
23.8409 72.6629 24.1311 72.9904 24.3433 73.2591 cv
24.7275 73.745 li
24.0472 74.455 li
23.6674 74.8513 23.2307 75.2184 23.0583 75.2862 cv
22.7808 75.3957 22.6826 75.331 22.0779 74.6404 cv
21.3505 73.8089 21.19 73.7354 20.8765 74.0902 cv
20.6992 74.2904 20.743 74.378 21.4274 75.1969 cv
22.1703 76.0858 li
21.5657 76.6717 li
20.961 77.2582 20.3998 77.6976 20.2558 77.6976 cv
20.2147 77.6976 19.8328 77.3332 19.4184 76.8983 cv
18.7724 76.2204 18.6218 76.1205 18.4295 76.242 cv
18.0723 76.4681 18.0894 76.7809 18.4798 77.1621 cv
18.6728 77.3499 19.1036 77.8126 19.431 78.1835 cv
19.8485 78.6568 20.0826 78.8306 20.2054 78.7591 cv
20.303 78.7029 21.0996 78.0254 21.9814 77.25 cv
22.8632 76.4743 23.8471 75.6205 24.1731 75.3475 cv
25.2942 74.4092 25.828 73.8456 25.7386 73.694 cv
25.5662 73.3997 24.0062 71.6959 23.8583 71.6401 cv
23.7704 71.6069 23.6496 71.6422 23.5689 71.7243 cv
f
74.6316 74.6117 mo
73.7755 75.1555 73.2776 75.9518 73.3987 76.5848 cv
73.489 77.0584 74.5896 78.0782 75.0347 78.1014 cv
75.2236 78.1113 75.534 78.1288 75.7023 78.1391 cv
75.8772 78.1497 76.4521 78.1695 76.9938 78.1836 cv
77.9382 78.2085 77.983 78.2243 78.3803 78.6697 cv
79.0301 79.3987 79.0353 79.4418 78.5241 79.941 cv
78.2722 80.1871 78.0033 80.3838 77.9194 80.3838 cv
77.8369 80.3838 77.4906 80.0961 77.1573 79.7504 cv
76.6512 79.2262 76.5075 79.1386 76.32 79.2402 cv
75.9398 79.4462 76.0429 79.774 76.6855 80.4043 cv
77.3781 81.0839 77.7774 81.317 78.0833 81.2195 cv
78.1997 81.1825 78.6325 80.8057 79.0298 80.3964 cv
79.9222 79.4766 79.914 79.2836 78.9367 78.2475 cv
78.2848 77.5569 li
76.9627 77.4968 li
75.0227 77.4081 74.8951 77.3722 74.3822 76.7642 cv
73.9394 76.2395 li
74.3415 75.8176 li
74.8718 75.2608 75.239 75.2678 75.741 75.8433 cv
76.1766 76.3422 76.3949 76.3993 76.5678 76.0605 cv
76.6625 75.8748 76.5541 75.6896 76.0052 75.1014 cv
75.6352 74.7048 75.2534 74.3722 75.1678 74.3722 cv
75.0778 74.3719 74.8461 74.4759 74.6316 74.6117 cv
f
25.2945 75.6832 mo
24.437 76.6043 24.3217 76.7833 24.3877 77.0902 cv
24.4565 77.4112 24.4318 77.442 24.1044 77.442 cv
23.8204 77.442 23.5264 77.6723 22.6997 78.5419 cv
21.3378 79.9746 21.3395 80.067 22.7503 81.2218 cv
23.0905 81.5001 23.4292 81.8074 23.5052 81.9059 cv
23.6828 82.1366 23.6708 82.1492 28.3092 76.9558 cv
28.5378 76.6998 28.7205 76.461 28.7205 76.4185 cv
28.7205 76.3302 28.1159 75.7478 27.297 75.0481 cv
27.0325 74.8216 26.6838 74.6279 26.5414 74.6279 cv
26.3745 74.6279 25.9135 75.0179 25.2945 75.6832 cv
cp
27.1146 75.9135 mo
27.3792 76.1321 27.5869 76.3652 27.5869 76.4442 cv
27.5869 76.5865 26.6547 77.7876 26.34 78.0515 cv
26.2393 78.1357 26.0747 78.2096 25.9871 78.2096 cv
25.7859 78.2096 24.9418 77.466 24.9418 77.2884 cv
24.9418 77.1477 26.4371 75.5233 26.5665 75.5233 cv
26.6089 75.5233 26.8501 75.6949 27.1146 75.9135 cv
cp
24.8473 78.4713 mo
25.1118 78.69 25.3195 78.9234 25.3195 79.0024 cv
25.3195 79.1256 25.0009 79.5267 24.0904 80.5501 cv
23.9196 80.7421 23.7297 80.8954 23.663 80.8954 cv
23.5969 80.8954 23.3105 80.673 23.0207 80.3965 cv
22.4978 79.8976 li
23.3608 78.9894 li
23.8347 78.4905 24.2577 78.0813 24.2991 78.0813 cv
24.3419 78.0813 24.5828 78.2531 24.8473 78.4713 cv
f
33.9058 80.0385 mo
33.8326 80.1293 33.6513 80.4927 33.5068 80.8379 cv
33.3624 81.1832 33.1763 81.5087 33.0972 81.5541 cv
33.0189 81.599 32.6756 81.4966 32.3478 81.3304 cv
31.6049 80.9529 31.558 80.9536 31.3832 81.343 cv
31.2466 81.6469 31.271 81.679 31.863 81.9826 cv
32.2027 82.1571 32.5216 82.3607 32.5644 82.4305 cv
32.6435 82.5606 31.5293 84.8477 31.3024 85.0206 cv
31.2326 85.0736 30.8111 85.105 30.3576 85.091 cv
29.6271 85.0681 29.535 85.0927 29.5012 85.321 cv
29.4488 85.6769 29.69 85.8548 30.2947 85.9058 cv
30.7357 85.9427 30.7984 85.9879 30.7984 86.2678 cv
30.7984 86.4981 30.8761 86.5984 31.0755 86.6258 cv
31.3008 86.6569 31.4058 86.5491 31.6361 86.0502 cv
31.7911 85.7144 32.1542 85.0014 32.4371 84.4768 cv
34.1214 81.356 34.6149 80.3034 34.495 80.0896 cv
34.3521 79.834 34.0902 79.811 33.9058 80.0385 cv
f
67.7607 79.8979 mo
67.7573 79.9185 67.7316 80.3008 67.7042 80.7356 cv
67.6765 81.1705 67.5965 81.6428 67.5276 81.7718 cv
67.4565 81.9049 67.4292 82.1171 67.4647 82.2578 cv
67.5168 82.4641 67.3956 82.5656 66.7656 82.8463 cv
66.0035 83.185 li
66.0035 82.8781 li
66.0035 82.4558 64.6885 81.4299 64.3915 81.6205 cv
64.0072 81.8662 64.089 82.0366 64.8576 82.5899 cv
65.273 82.8893 65.6162 83.2086 65.6196 83.3004 cv
65.623 83.3907 65.4242 83.5518 65.1847 83.6538 cv
64.6639 83.8746 64.6536 83.9399 65.0116 84.7458 cv
65.313 85.4236 65.5789 85.6019 65.865 85.3172 cv
66.0176 85.1656 66.0251 85.0653 65.9026 84.7968 cv
65.8212 84.6174 65.7513 84.3871 65.7513 84.2979 cv
65.7513 84.0898 68.4721 82.6861 68.8752 82.6861 cv
69.0525 82.6861 69.1955 82.8015 69.2725 83.006 cv
69.3929 83.3257 69.8138 83.4427 69.9634 83.198 cv
70.0486 83.058 69.4799 81.8563 69.2656 81.7235 cv
69.19 81.6763 69.0641 81.7013 68.9884 81.778 cv
68.9101 81.8573 68.724 81.9185 68.5604 81.9185 cv
68.2798 81.9185 68.2716 81.8867 68.302 80.9272 cv
68.3321 79.9807 68.3208 79.9342 68.0502 79.8976 cv
67.8997 79.8771 67.7641 79.8771 67.7607 79.8979 cv
f
34.8106 81.7078 mo
34.4972 82.3474 33.964 83.4002 33.6352 84.0292 cv
32.223 86.7281 32.2103 86.7568 32.2914 87.0864 cv
32.3438 87.2995 32.5494 87.5099 32.8645 87.6725 cv
33.5951 88.05 33.9664 88.0096 34.261 87.5212 cv
34.5622 87.0223 34.5645 86.9837 34.313 86.7281 cv
34.0471 86.4585 33.9127 86.4725 33.8196 86.7794 cv
33.7385 87.048 33.2092 87.138 33.0685 86.9074 cv
33.0254 86.8369 33.2851 86.2169 33.6468 85.526 cv
34.5307 83.8373 34.5984 83.7429 34.9933 83.6521 cv
36.4418 83.3181 36.8042 83.0674 36.4825 82.6225 cv
36.3341 82.4172 36.2656 82.4096 35.8498 82.552 cv
35.5979 82.6385 35.3461 82.6739 35.3019 82.6287 cv
35.2565 82.5828 35.4001 82.1745 35.6236 81.7143 cv
36.0521 80.8318 36.0531 80.7165 35.6356 80.6049 cv
35.4207 80.5471 35.2992 80.71 34.8106 81.7078 cv
f
65.5591 80.9081 mo
65.4769 81.1822 65.4998 81.2078 66.4193 81.8747 cv
66.7975 82.1492 66.9185 82.1848 67.0616 82.0637 cv
67.3237 81.8419 67.1879 81.5891 66.5326 81.0805 cv
65.8779 80.572 65.6713 80.5354 65.5591 80.9081 cv
f
40.3568 82.9421 mo
40.2501 83.4714 40.1324 83.5169 39.5025 83.274 cv
39.2129 83.1621 38.7486 83.0554 38.4762 83.0379 cv
38.0228 83.0088 37.9786 83.0338 37.9786 83.3195 cv
37.9786 83.5991 38.0669 83.6566 38.7975 83.8529 cv
41.3417 84.5377 42.074 84.7506 42.4877 84.9251 cv
42.9161 85.1057 42.952 85.101 43.1347 84.8351 cv
43.3853 84.471 43.2182 84.264 42.5886 84.1572 cv
41.9713 84.0529 41.2192 83.7897 41.0518 83.6199 cv
40.9513 83.5176 40.9544 83.4023 41.0635 83.1981 cv
41.2671 82.8165 41.1402 82.5581 40.7497 82.5581 cv
40.4975 82.5581 40.4188 82.6351 40.3568 82.9421 cv
f
60.1339 82.8141 mo
60.0077 82.9424 60.1705 84.1189 60.356 84.4128 cv
60.3998 84.483 60.4734 84.7201 60.5182 84.9374 cv
60.6068 85.3669 60.7389 85.2936 58.9249 85.8189 cv
58.1944 86.0304 58.037 86.2275 58.3706 86.5132 cv
58.5071 86.6299 58.761 86.5998 59.4916 86.3797 cv
60.5873 86.0492 60.8392 86.1002 60.8392 86.6515 cv
60.8392 87.1688 60.2924 88.5191 59.8544 89.082 cv
59.3373 89.7473 59.2969 89.8475 59.4649 90.0539 cv
59.8287 90.5014 60.3012 90.0796 60.9688 88.7111 cv
61.1749 88.2888 61.3432 87.8512 61.3432 87.739 cv
61.3432 87.3751 61.7087 87.3851 62.1491 87.7608 cv
62.968 88.4589 63.8946 89.082 64.1143 89.082 cv
64.2402 89.082 64.4106 88.9965 64.4976 88.89 cv
64.6871 88.6581 64.5044 88.3761 64.0763 88.2396 cv
63.4733 88.0475 62.1542 86.8308 61.7719 86.1142 cv
61.5479 85.6947 61.6581 85.6119 62.7411 85.385 cv
63.5726 85.2108 63.808 85.012 63.5749 84.6814 cv
63.432 84.4785 63.371 84.4819 62.6784 84.727 cv
61.4438 85.163 61.4274 85.1547 61.0379 83.9139 cv
60.8494 83.3127 60.6178 82.8073 60.5121 82.7662 cv
60.2728 82.6735 60.2728 82.6735 60.1339 82.8141 cv
f
67.4524 83.7147 mo
66.2181 84.3485 66.1233 84.4365 66.432 84.6681 cv
66.638 84.8231 66.7406 84.8111 67.1691 84.5857 cv
67.5089 84.4063 67.7084 84.3659 67.7987 84.4577 cv
67.8904 84.5504 67.8904 84.6431 67.7987 84.7581 cv
67.7258 84.8501 67.6468 85.0907 67.6225 85.2953 cv
67.5855 85.6067 67.4524 85.7299 66.7975 86.0602 cv
66.0039 86.4601 65.8824 86.6049 66.1298 86.8561 cv
66.2287 86.9566 66.5141 86.8749 67.1311 86.5683 cv
67.6098 86.3305 68.0502 86.1395 68.12 86.1395 cv
68.2333 86.1395 68.7028 86.7859 68.6237 86.8335 cv
68.6029 86.8458 68.3718 86.9536 68.1074 87.0744 cv
67.591 87.3101 67.5366 87.4272 67.8302 87.6708 cv
67.9801 87.7953 68.0947 87.7968 68.3846 87.6766 cv
69.1024 87.3789 69.355 86.838 69.0604 86.2291 cv
68.8328 85.759 68.9389 85.6293 69.9086 85.1917 cv
70.7652 84.805 70.8948 84.6599 70.6266 84.3871 cv
70.4582 84.2161 70.3621 84.2393 69.7447 84.5959 cv
68.5734 85.273 68.1196 85.0791 68.5987 84.1055 cv
68.8068 83.6836 68.801 83.3103 68.5861 83.2391 cv
68.5167 83.2165 68.0064 83.4304 67.4524 83.7147 cv
f
45.794 83.863 mo
45.7628 83.9547 45.72 84.2596 45.6995 84.5408 cv
45.6619 85.0524 li
45.1075 85.0524 li
44.4522 85.0524 44.4078 85.1294 44.2866 86.4595 cv
44.2059 87.3509 44.148 87.8923 43.9653 89.4653 cv
43.8192 90.7242 43.7849 90.691 45.3214 90.781 cv
46.4427 90.8463 46.6936 90.8272 46.8143 90.6677 cv
46.8938 90.5623 46.9988 89.8875 47.0474 89.171 cv
47.0956 88.4548 47.1576 87.6934 47.185 87.4826 cv
47.4615 85.3337 47.4245 85.1284 46.7576 85.1198 cv
46.4756 85.1164 46.4582 85.0716 46.4993 84.4446 cv
46.542 83.7924 46.5334 83.7723 46.197 83.735 cv
45.9955 83.7131 45.8272 83.7661 45.794 83.863 cv
cp
45.5195 86.5618 mo
45.5017 87.24 45.4459 87.3604 45.1958 87.2643 cv
45.0822 87.2209 45.0456 86.9971 45.0761 86.5365 cv
45.1117 85.9989 45.1602 85.8784 45.3279 85.9096 cv
45.4881 85.9394 45.5319 86.0886 45.5195 86.5618 cv
cp
46.6443 86.0502 mo
46.7381 86.3062 46.5557 87.355 46.4174 87.355 cv
46.2474 87.355 46.1848 86.8561 46.2867 86.3188 cv
46.3695 85.8839 46.5372 85.758 46.6443 86.0502 cv
cp
45.242 88.9667 mo
45.1993 89.8109 45.0932 90.0737 44.8557 89.9238 cv
44.7681 89.8687 44.7448 89.568 44.7924 89.1074 cv
44.8889 88.1736 44.9402 88.0202 45.1329 88.0917 cv
45.2389 88.131 45.2714 88.3911 45.242 88.9667 cv
cp
46.388 89.069 mo
46.3428 89.5806 46.2525 89.8981 46.1403 89.9389 cv
46.0397 89.9751 45.9442 89.981 45.9178 89.9516 cv
45.8566 89.8834 46.0831 88.3141 46.1762 88.1608 cv
46.3548 87.8673 46.4558 88.3015 46.388 89.069 cv
f
53.5909 83.9779 mo
53.5396 84.0617 53.4906 84.4002 53.4837 84.7198 cv
53.4711 85.3084 li
52.5957 85.3723 li
51.7899 85.4312 51.714 85.462 51.6387 85.7624 cv
51.5931 85.9431 51.5987 86.4277 51.651 86.8496 cv
51.703 87.2671 51.7796 88.1479 51.8211 88.8 cv
51.8628 89.4526 51.9274 90.0419 51.9651 90.1049 cv
52.0821 90.3023 52.7237 90.2585 52.901 90.0408 cv
53.0077 89.9105 53.2319 89.8502 53.5214 89.8749 cv
53.9372 89.9101 53.9813 89.9505 54.0474 90.3608 cv
54.2003 91.3087 54.3149 91.3945 55.3983 91.3689 cv
55.9274 91.3566 56.5056 91.2943 56.6702 91.2324 cv
57.2373 91.0206 57.4891 90.4166 57.1363 90.1164 cv
57.0138 90.0121 56.9159 90.0408 56.7458 90.2328 cv
56.5648 90.4375 56.362 90.4887 55.7323 90.4887 cv
55.0267 90.4887 54.9377 90.4597 54.8755 90.2072 cv
54.7796 89.8184 54.9702 89.7213 55.8264 89.7213 cv
56.2171 89.7213 56.5761 89.6689 56.6138 89.6059 cv
56.6517 89.5434 56.5973 88.8322 56.494 88.0391 cv
56.391 87.2462 56.2709 86.2508 56.2295 85.8456 cv
56.1542 85.1038 li
55.2535 85.1294 li
54.3533 85.1547 li
54.2903 84.5281 li
54.2376 84.0039 54.1829 83.8951 53.9564 83.863 cv
53.8051 83.8418 53.6435 83.8924 53.5909 83.9779 cv
cp
55.6502 86.4277 mo
55.6878 86.9074 li
55.1334 86.9074 li
54.6171 86.9074 54.5737 86.8804 54.4983 86.5108 cv
54.3861 85.9616 54.4785 85.8669 55.0832 85.9099 cv
55.5998 85.9473 55.6132 85.9592 55.6502 86.4277 cv
cp
53.7609 86.5427 mo
53.7975 86.9981 53.7859 87.0104 53.2945 87.0552 cv
52.602 87.1179 52.5263 87.0721 52.5263 86.5874 cv
52.5263 86.1077 52.6522 86.0187 53.2822 86.0523 cv
53.6928 86.0742 53.7257 86.1077 53.7609 86.5427 cv
cp
55.7247 87.6876 mo
55.8192 87.7862 55.8558 88.6342 55.772 88.7747 cv
55.7254 88.8524 55.4736 88.9099 55.2094 88.9027 cv
54.7475 88.8904 54.7279 88.8709 54.6615 88.3463 cv
54.624 88.0524 54.6441 87.7499 54.7053 87.6876 cv
54.819 87.5723 55.6142 87.5723 55.7247 87.6876 cv
cp
53.9458 88.3525 mo
53.9754 88.6468 53.9776 88.9332 53.9494 88.9855 cv
53.9224 89.0375 53.6408 89.0817 53.339 89.0817 cv
52.8476 89.0817 52.7689 89.0437 52.7029 88.7744 cv
52.5578 88.1865 52.6844 87.8686 53.093 87.7934 cv
53.7356 87.6746 53.8869 87.7738 53.9458 88.3525 cv
f
48.2438 84.1709 mo
48.0343 84.2271 47.7722 85.3594 47.6552 86.7154 cv
47.6189 87.1374 47.4848 88.2888 47.3578 89.2737 cv
47.1231 91.0897 47.1535 91.3843 47.5764 91.3843 cv
47.6785 91.3843 47.7846 91.3008 47.8284 91.1858 cv
47.8862 91.0335 48.0172 91.0068 48.395 91.0719 cv
49.3148 91.2296 49.7768 90.4505 49.7953 88.7111 cv
49.8025 88.0585 49.7395 87.6126 49.604 87.355 cv
49.4124 86.9895 49.4223 86.9201 49.8151 85.8969 cv
50.213 84.8607 50.2558 84.3739 49.9567 84.2825 cv
49.6923 84.2014 48.4347 84.1196 48.2438 84.1709 cv
cp
49.4479 85.0397 mo
49.4855 85.1386 49.3442 85.6026 49.1324 86.0759 cv
48.6971 87.0477 48.6725 87.2403 48.9367 87.5979 cv
49.0609 87.7659 49.1256 88.1479 49.1256 88.7108 cv
49.1256 89.8746 48.9935 90.1893 48.4703 90.2708 cv
48.2438 90.306 48.032 90.3122 48.0045 90.2838 cv
47.9769 90.2561 48.0248 89.5868 48.1117 88.7939 cv
48.1982 88.0007 48.2858 87.2112 48.3067 87.0351 cv
48.328 86.8578 48.384 86.3445 48.4326 85.8839 cv
48.4813 85.4233 48.5445 85.0124 48.5739 84.9627 cv
48.6712 84.7985 49.3798 84.8607 49.4479 85.0397 cv
f
38.379 84.5152 mo
38.2199 84.7845 37.7542 86.3189 37.6063 87.0608 cv
37.5594 87.2958 37.336 87.5385 36.9075 87.8194 cv
36.2526 88.2495 36.1591 88.4346 36.4668 88.6913 cv
36.605 88.8073 36.7187 88.7981 36.9958 88.6491 cv
37.4995 88.3785 38.1668 87.7212 38.1668 87.4956 cv
38.1668 87.2466 38.5952 87.0135 38.8598 87.1189 cv
39.0767 87.2055 39.074 87.3167 38.8307 88.3141 cv
38.7369 88.6981 38.6593 88.771 38.2866 88.8261 cv
37.9215 88.8794 37.852 88.9408 37.852 89.2097 cv
37.852 89.6077 38.3811 89.8297 38.8977 89.6487 cv
39.1749 89.5515 39.2889 89.3759 39.5147 88.6981 cv
39.6684 88.2375 39.82 87.7639 39.8549 87.6363 cv
39.9089 87.4388 39.9558 87.4261 40.1823 87.5466 cv
40.388 87.6561 40.4332 87.7643 40.3839 88.0329 cv
40.349 88.2242 40.4164 88.7491 40.5352 89.2097 cv
40.726 89.9516 40.7867 90.0453 41.0956 90.0796 cv
41.3855 90.1114 41.4419 90.0686 41.4419 89.817 cv
41.4419 89.6501 41.3498 89.2419 41.2342 88.8962 cv
41.084 88.4486 41.0614 88.219 41.1521 88.0712 cv
41.3136 87.8077 41.9456 85.7303 41.9456 85.4617 cv
41.9456 85.244 41.8074 85.1801 40.6231 84.8505 cv
40.132 84.7137 39.4764 84.5227 39.1431 84.4193 cv
38.5641 84.2397 38.5398 84.2428 38.379 84.5152 cv
cp
39.9811 85.4479 mo
40.9635 85.7043 41.0532 85.784 40.9461 86.3062 cv
40.8376 86.8359 40.5731 86.8701 39.5404 86.4886 cv
38.8347 86.2282 38.7383 86.1525 38.7667 85.8839 cv
38.7968 85.6026 39.0042 85.2444 39.137 85.2444 cv
39.1715 85.2444 39.5531 85.3364 39.9811 85.4479 cv
f
80.6143 46.5513 mo
80.5109 46.5722 79.4998 46.6622 78.3788 46.7498 cv
77.2578 46.8374 76.3291 46.9445 76.3256 46.9863 cv
76.3222 47.0283 76.2945 47.984 76.2637 49.1099 cv
76.1991 51.5015 76.1713 51.8293 75.9137 53.2668 cv
75.5954 55.0428 75.2368 56.2852 74.3464 58.7029 cv
73.5436 60.8823 71.5261 64.1135 69.5708 66.3521 cv
68.3078 67.7972 65.1367 70.5063 64.026 71.0881 cv
63.4894 71.3694 63.3792 71.251 62.5326 69.486 cv
62.0361 68.4498 61.7422 67.9765 61.5951 67.9765 cv
61.3052 67.9765 59.2979 68.9832 59.3506 69.102 cv
59.3725 69.1516 59.7476 69.9335 60.1842 70.8417 cv
60.8299 72.1848 60.9473 72.5226 60.8142 72.6577 cv
60.5226 72.9536 57.1863 74.0863 55.9899 74.2954 cv
55.7894 74.3303 55.3347 74.4193 54.9823 74.4918 cv
53.0003 74.9011 49.1253 74.9347 46.9209 74.5616 cv
42.3865 73.7941 38.1366 71.9247 34.9049 69.2765 cv
34.4638 68.9152 34.0614 68.6158 34.0169 68.6158 cv
33.9714 68.6158 33.4605 69.1403 32.8706 69.7928 cv
32.2806 70.4451 31.4836 71.3143 31.082 71.7434 cv
30.6871 72.1656 30.3579 72.5814 30.3579 72.6577 cv
30.3579 72.7894 31.4789 73.6743 33.1916 74.8956 cv
34.7331 75.9941 37.0586 77.2458 39.1368 78.0951 cv
44.4794 80.2787 51.5056 80.8665 57.2492 79.6093 cv
60.7635 78.8404 64.9485 77.0271 67.9933 74.9541 cv
69.3285 74.0453 71.7772 71.9733 72.5523 71.0973 cv
72.7925 70.8259 73.351 70.2018 73.7773 69.7285 cv
74.4693 68.961 76.0091 66.9315 76.4177 66.2495 cv
78.693 62.4505 79.6545 60.243 80.6245 56.5922 cv
81.2408 54.2719 81.4944 52.3969 81.5598 49.6851 cv
81.6224 47.0629 81.5519 46.5592 81.1177 46.5321 cv
80.9421 46.5215 80.7204 46.5298 80.6143 46.5513 cv
f
54.781 56.6114 mo
54.2016 56.8954 53.7 57.1506 53.6726 57.1763 cv
53.5628 57.2779 54.6927 59.4063 54.8563 59.4063 cv
55.0832 59.4063 57.0001 58.3955 56.9905 58.2809 cv
56.9752 58.1016 56.0574 56.2305 55.9523 56.1644 cv
55.8904 56.1254 55.3603 56.3277 54.781 56.6114 cv
f
56.7336 60.1739 mo
56.3301 60.382 55.924 60.5575 55.8452 60.5575 cv
55.7628 60.5575 55.6386 60.6342 55.5557 60.7368 cv
55.4411 60.8781 55.5201 61.146 55.9335 62.0156 cv
56.2193 62.6168 56.5046 63.1157 56.5634 63.1157 cv
56.6216 63.1157 56.9474 62.9518 57.2748 62.7574 cv
57.6024 62.5638 58.0961 62.2968 58.3517 62.1757 cv
58.6163 62.0505 58.8243 61.9238 58.8243 61.8879 cv
58.8243 61.6447 57.7772 59.7903 57.6403 59.7903 cv
57.5514 59.79 57.1363 59.9655 56.7336 60.1739 cv
f
58.7549 63.6848 mo
58.4777 63.8412 58.0291 64.0458 57.7724 64.1327 cv
57.508 64.2221 57.2746 64.36 57.242 64.4462 cv
57.1599 64.6635 58.1855 66.8251 58.3706 66.8251 cv
58.4465 66.8251 58.8808 66.6061 59.3342 66.3389 cv
59.7876 66.0719 60.2557 65.8156 60.3735 65.7698 cv
60.4867 65.726 60.5873 65.6206 60.5873 65.546 cv
60.5873 65.2647 59.5618 63.3714 59.416 63.384 cv
59.3342 63.3912 59.0321 63.5284 58.7549 63.6848 cv
f
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPS-BoldMT Initial
ct_T42Dict begin
-0.555 -0.324 2 1.055
 256 array 0 1 255 {1 index exch /.notdef put} for  /FAAAAA+TimesNewRomanPS-BoldMT
Type42DictBegin
[<00010000000c000c000c000c4f532f321a7b55a6000000cc000000606376
742074e2f99d0000012c0000082c6670676d379e7810000009580000063f
676c7966611caa230000bb6c0000827268656164ec24587900000f980000
003668686561130416b300000fd000000024686d74780d90100100000ff4
0000415e6c6f63615c957ae1000051540000249c6d6178701b64145b0000
75f0000000206e616d65f5ca8d6000007610000031f470726570025f6028
0000a80400001368676469720000000000000000000000000003036a02bc
00050008059a053300000125059a0533000003a000660212010502020803
070505020304e0002effc000785b0000000900000000544d432000200020
fb04056bfe460133072101bb400001ffffff000003a7054c000000200015
058e001f054c001f054c001c0394001b0000ffe10000ffe40000ffe8fe4a
fffc056b0023fe6affe00313000001240000012400000000000000000025
0084002400e8009600bf005d00cb02030045012e00580004011800190002
0139004b011000170005010a00280023004b00500015004a00e5010d00af
003100ea014600810125004f009c0022004e00160041009100a00147ffe9
008100d3016900ab001700a801400027004c0148ffdf00510050ffb7012e
0000003b0097009a010e001f004c010a0123ffde00220073008700ba00d6
00ff005a009805a0ffe900500052006effb7005c00d1015a015bff1c0049
006e007e009800a100bd00e4018801c00405ff6000350062007201070113
01280382ffa8003805d809b5ffc4ffd00010006e00a100ba00ec022b0446
ffee004000e80401ff680003001300330033006e00a200b600dc01180135
0343000e0034005c005d007c00af0328003b00480089009c00ba017b01af
030effa4001700370063007f00e0017801c0022105d805f0ff7a00120027
00340052008a00a400c100c300eb011801460154036dfe3fff4e00010008
002b0045006e0084008600ae00af00c200c200c4010f01210149017b01c1
01de01e1036e03e6006300a700ed00f600f801280169017e023f02820532
fd81ffb5002600350040004500490057006c00ac01260140015b017b019c
0277027e027f03b603dc042804efff38ffc30006002f0040008200aa00b6
00ce00d300d700e50146014d01d6027e03b30586ff7b0012002f0068007f
008400a500b900f501050109010c01140120013301370178017b01c001e1
021d02230258036203af058cff79ff8d00210024005d00650068006a0083
008500b700cf00e200eb00ed011a0120012f0137013f0150018d018f01c4
02cf0357035c03960440049604ab04c204fc051105c2fed1fee000130021
00240030004d004d005d0066007a007c00b800b800c300da0103011b011e
012f013d014a0150015f0166017c0190019501a301a601b601c701d001e9
01ef01f90218028c029402bb02c502cf02d0031d032a0344039f03cc0421
04da04fb0761fd1dfebffeefff0bff2bff33ff90ff9cffdbffed00010008
001c0025003f0043005a006b0080008400900095009d00a700b400cd00d5
00d600df00df00df00e400f000f600fb010601130119011b012201230127
012c013f015701580177018a019301a401c601e101e401fc0200020c0222
0222022a0236024a025c028202ec02fc030a032303410378039703d203fa
04790532053205ab05b505f006e4072508ccfc9bfddefe00fe69fe96fe9b
ff3500030006000e00130019003400420048004a00570064007100710072
00760077007a007a0083009c00af00af00b200bb00c800cc00cf00cf00db
00dc00df00e400e400e400e900eb00f400fd00fe01020105010501080108
011b01220123013001370143015b016001650178017801780178017b0182
018901980198019b019e01a101a601d101d201d301df01e301f502000200
022d02410247024a0250025b025d025d025f02630281028b02b402b402ce
02d602db02e202fa03100311031f0327034503670388038a03b003b403d4
03d5042604410448046b04c704d1053205480549055f0563058b05a105a3
05c205ca05e405ff069306a206b806e8070a073607500754078907a907bb
07dc07ff08270120014d011b0129000000000000000000000093015b042f
029001ff02b800db00be027403cb029401ab000000000000000000000000
058a038a0364005f02b803bd029d7c9003e203ac02820000044400000000
003d010a00cc00bc00cc05d3041505e800c7021a00ee00000194036102be
029902180136033b048504cc0050007905a305a302df020702af000001eb
0064005f0055011900f2045600ef00c800cf058a0143014602de01ab02c6
024a005d00d800a402bb009900a0006501370274036400b500fa009101b9
032001b60025007f00d000ec00e000000000000000000000042ffd42023f
06180276063a013701b90151ffc70229ffeb023f02e1018500db03fa0190
0156014e012f00a600e300bb00d50134011f04fe041b00d100e4011e009b
00cd00e700b300e200ca042400b800f500b90334005a04e00123012ffdc9
fe440574038301f602410002001700500015004f001700a8005100980052
0049006e000e00af017b017b019c006a008300eb00cd0122000005d306da
009a008f00ba0315002503a5028002ff03c80420009200e0034c009b007d
00f8011c013400a8006d006900000420ffe6fea4006a006a003800380162
015a0044006d0048001eff6d00a600a600400040ff5cff990559052b00ce
014c011500bf0140011800c800960509feed004800b4009500db0048018b
00b3fe6400c000ea01180125013203b003ed0576059005aa05b405be05cd
063100780084009b00cc00e200f4010a0120016300d100ea00f701080142
0019002c00340041003800480058006c025903bd0043011a007000d30028
003700420050005a0064007300780082008c009c00a500bd00ce00f00110
015c00be00d801020117012c016300ea01080041004b0055005f007300a6
0109018301b300410064001e002a00eb00fa010e01380274002c00400082
009600b600c000cc00dc00e600f000ff010a0120012c013b014401560163
00f70057006401100136005001b10000ffb60039004e004403cc00e50024
01100042012201a400f0006000e0000e001d003905e30102002cfe4eff38
026903bd011600ff000e00a00054001b003d01710041000f005000fd0015
014f0035fe47003900ab0080005005a50016002b00ac0115021504570555
007300da005c00ce0072ff58019a074403d703f0047040425554403f3e3d
3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f1e
1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100
2c4523466020b02660b004262348482d2c452346236120b02661b0042623
48482d2c45234660b0206120b04660b004262348482d2c4523462361b020
6020b02661b02061b004262348482d2c45234660b0406120b06660b00426
2348482d2c4523462361b0406020b02661b04061b004262348482d2c0110
203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed
51582320b04d44235920b09051582320b00d44235921212d2c2020451868
4420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00b1
0a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab10200
080d2d2c45b01a234445b01923442d2c2045b00325456164b05051584544
1b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c45
b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a45
186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21b017
7ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c58b002
855958b00185592d2c20b0032545b019234445b01a23444565234520b003
25606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ffe0
001a45208a54582321b03f1b235961441cb114008a5279b3194020194520
8a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b
2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d
2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349b0
4060b0206320b000525823b002253823b002256538008a63381b21212121
2159012d2c4bb06451584569b00943608a103a1b212121592d2c01b00525
1023208af500b0016023edec2d2c01b005251023208af500b0016123edec
2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b0016101
10203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d
2c352d2c76b8029f23701020b8029f4520b0005058b00161593a2f182d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826b0
0826b00826b008260f10161345683ab001162d2cb4000100000015b00826
b00826b00826b008260f1016134568653ab001162d2c4b53234b515a5820
458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a
58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb013
4358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580cb0
0425b00425060c6423646164b807085158b00425b00425012046b0106048
2046b0106048590a21211b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b8fff060482046b8fff060
48590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b5323
4b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b212159
2d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c
462346608a8a462320468a608a61b8ff8062232010238ab9032703278a70
456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b2020202436042b12401885458b2022002
436042004b014b5258b2020802436042591bb940000080885458b2020402
43604259b94000008063b80100885458b202080243604259b94000010063
b80200885458b202100243604259b12601885158b94000020063b8040088
5458b202400243604259b94000040063b80800885458b202800243604259
b12801885158b94000080063b81000885458ba0002010000024360425959
59595959592d2cb0024354584b53234b515a58381b2121591b2121212159
2d0000010000000700005d7f135d5f0f3cf50819080000000000a2e33546
00000000d684d862fb89fd61100008720001000900010000000000000001
00000721fe4500571000fb89fa0b10000001000000000000000000000000
00000e620639011c00000000020000000200000002aa00af047100b00000
000000000000000000000000000000000000000000000000000000000000
000000000000000002aa00320200005a000000000400004a040000870400
00320000000004000033000000000400004c04000045040000480400003f
0000000000000000000000000000000000000000000000000000000005c7
00100556002b05c7005105c7001b0556002904e3002e0639005300000000
031d0029040000160000000005560026078d002905c7001d0639005004e3
00340000000005c700260473006a0556004a05c7003005c7001000000000
0000000005c7001200000000000000000000000000000000000000000000
0000000000000400005c00000000038d004e0473004f038d004f02aa0042
0400004d047300460239002a02aaffc7000000000239002b06aa004c0473
00460400004a0473002700000000038d004b031d005102aa00260473003f
040000130000000000000000040000110000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000473003b0473003600000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000239002a00000000000000000000
00000000000002aa00c30000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000196ffba0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000004e6ffba00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000100ffba0800ffba1000ffba000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000004c100660000
00000000000000000000000000000000000002aaffc70000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000019a0000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000fecb0000ff1d0000fef1000000000000feec00000000
0000fee80000fee60000feef0000fee80000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000003e100420368004c03e1
00400000000003fe0026000000000400004c03e7003b03f400430400003f
0439006702c1ffe7040000320000000004000033000000000400004c03b8
001b040000480400003f0239002a04b0001c06630010067800100479003b
069000100439000a040600140444004e04a4001903c3000e038d000e04a4
004e04e7001402540017034200190000000003c3000e05790010047bfff0
04f2004803fc001400000000048900140393004803d1001d04830012043d
001200000000000000000431001200000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000025400170000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
02a8001e02a8007002a800440000000002a8003f0000000002a8003b02a8
003902a8004202a8003b02a8001f02a8007102a800450000000002a80040
0000000002a8003c02a8003a02a8004302a8003c0000000008c4004a0000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000003600360036003600a300fe00fe00fe00fe00fe00fe00fe00fe00fe
00fe00fe011901410141022c02950339033903a203a2044904ae05a10641
06410641064106410641064106410717080e08d7099f0a8f0b610c670c67
0cdc0d460d460dc70ec10fb010c0116111611265135013d9149f15671567
1567165c165c165c165c165c165c165c165c17e117e1189019931a621b38
1c8d1dc01e5c1f131f131f92211e2262234324442444251626b6272c282b
291f291f291f2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c
2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c
2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c
2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c
2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c
2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c
2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2a1c2ad92ba02ba0
2ba02ba02ba02ba02ba02ba02ba02ba02ba02ba02ba02ba02ba02ba02ba0
2ba02ba02ba02ba02c0b2c0b2c0b2c0b2c0b2c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c322c322c322c322c322c322c322c322c322c322c322c32
2c322c322c322c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c
2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c
2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c2c4c
2c4c2c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c662c662c662c662c662c662c662c662c662c662c662c66
2c662c662c662c802c9a2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb42cb4
2cb42cb42cb42cb42cb42cb42dbf2dbf2dbf2dbf2dbf2dbf2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b2e2b
2e2b2e2b2e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e332e332e332e332e332e33
2e332e332e332e332e332e332e332e332e332e6f2ea82ef72ef72f312f31
2f862fb0302b307f307f307f307f307f307f307f307f307f307f307f307f
307f307f307f307f307f307f307f307f307f307f307f307f307f307f307f
307f307f307f307f307f30d6311c3188318831cc31cc31d4320832173227
322f323832403240324832483250325832603268327033373432351f35bf
36cd375637d0383038853912398739fd3a813ac63b203b203b6f3be63c52
3cad3d103d103d913e343e943ef03f5e3f5e3f5e3fe63fe63fe63fe63fe6
3fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe6
3fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe6
3fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe63fe6
3fe63fe63fe63fe63fe63fe63fe63fe63fe63ffd3ffd3ffd3ffd3ffd3ffd
3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd
3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd
3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd
3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd
3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd
3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd
3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd
3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd3ffd
4006400f4018401840214021402a4033403c4045404e4057406040604069
40694072407b4084408d408d413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
413941394139413941394139413941394139413941394139413941394139
41394139413941394139413900010000124d008e00100033000300020010
002f00560000089b13680002000100>
<0000005303ea0000000300000000021a00000000000300000001001e021a
0000000300000002000802c2000000030000000300520290000000030000
0004002802a20000000300000005001802e20000000300000006002c02fa
00000003000000070076021a000000030000000800300334000000030000
000900860544000000030000000d0e0405ca0001000000000000010d13ce
0001000000000001000f14db00010000000000020004152f000100000000
00030029151600010000000000040014151f0001000000000005000c153f
00010000000000060016154b0001000000000007003b14db000100000000
0008001813d5000100000000000900431561000100000000000d070215a4
0003000104030002000e1cc60003000104030004002e1ca6000300010405
0002000a1cf40003000104050004002a1cd4000300010406000200061d1e
000300010406000400261cfe000300010407000200081d44000300010407
000400281d240003000104080002000c1d6c0003000104080004002c1d4c
0003000104090000021e03260003000104090001001e021a000300010409
0002000802c20003000104090003005202900003000104090004002802a2
0003000104090005001802e20003000104090006002c02fa000300010409
00070076021a000300010409000800300334000300010409000900860544
000300010409000d0e141d7800030001040a0002000e2bac00030001040a
0004002e2b8c00030001040b000200122bda00030001040b000400322bba
00030001040c000200082c0c00030001040c000400282bec00030001040e
000200102c3e00030001040e000400302c1e000300010410000200122c0c
000300010410000400322bec000300010413000200062c6e000300010413
000400262c4e0003000104140002000e2c940003000104140004002e2c74
000300010415000200142cc2000300010415000400342ca2000300010416
0002000e2cf60003000104160004002e2cd6000300010419000200142d24
000300010419000400342d0400030001041b0002000a2d5800030001041b
0004002a2d3800030001041d000200061d4400030001041d000400261d24
00030001041f0002000a2d8200030001041f0004002a2d62000300010424
0002000c2dac0003000104240004002c2d8c00030001042a000200082dd8
00030001042a000400282db800030001042d0002000a2e0000030001042d
0004002a2de000030001080a0002000e2bac00030001080a0004002e2b8c
0003000108160002000e2cf60003000108160004002e2cd6000300010c0a
0002000e2bac000300010c0a0004002e2b8c000300010c0c000200082c0c
000300010c0c000400282bec00a900200032003000310037002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0020
000d000d0048006500620072006500770020004f00700065006e00540079
007000650020004c00610079006f007500740020006c006f006700690063
00200063006f0070007900720069006700680074002000a9002000320030
003000330020002600200032003000300037002c002000520061006c0070
0068002000480061006e0063006f0063006b002000260020004a006f0068
006e00200048007500640073006f006e002e002000540068006900730020
006c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
006500770020006900730020006f00700065006e00200073006f00750072
0063006500200073006f00660074007700610072006500200075006e0064
0065007200200074006800650020004d004900540020004c006900630065
006e00730065003b002000730065006500200065006d0062006500640064
006500640020006c006900630065006e0073006500200064006500730063
00720069007000740069006f006e00200066006f00720020006400650074
00610069006c0073002e00540069006d006500730020004e006500770020
0052006f006d0061006e0020006900730020006100200074007200610064
0065006d00610072006b0020006f006600200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e002e004d006f006e006f0074007900700065003a00540069
006d006500730020004e0065007700200052006f006d0061006e00200042
006f006c006400200028004d006900630072006f0073006f006600740029
00560065007200730069006f006e00200037002e0030003000540069006d
00650073004e006500770052006f006d0061006e00500053002d0042006f
006c0064004d005400a90020003200300031003700200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e002e00200041006c006c00200052006900670068
00740073002000520065007300650072007600650064002e0020000d000a
000d000a0048006500620072006500770020004f00700065006e00540079
007000650020004c00610079006f007500740020006c006f006700690063
00200063006f0070007900720069006700680074002000a9002000320030
003000330020002600200032003000300037002c002000520061006c0070
0068002000480061006e0063006f0063006b002000260020004a006f0068
006e00200048007500640073006f006e002e002000540068006900730020
006c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
006500770020006900730020006f00700065006e00200073006f00750072
0063006500200073006f00660074007700610072006500200075006e0064
0065007200200074006800650020004d004900540020004c006900630065
006e00730065003b002000730065006500200065006d0062006500640064
006500640020006c006900630065006e0073006500200064006500730063
00720069007000740069006f006e00200066006f00720020006400650074
00610069006c0073002e004d006f006e006f007400790070006500200054
007900700065002000440072006100770069006e00670020004f00660066
0069006300650020002d0020005300740061006e006c006500790020004d
006f007200690073006f006e002c00200056006900630074006f00720020
004c0061007200640065006e007400200031003900330032004d00690063
0072006f0073006f0066007400200073007500700070006c006900650064
00200066006f006e0074002e00200059006f00750020006d006100790020
0075007300650020007400680069007300200066006f006e007400200074
006f0020006300720065006100740065002c00200064006900730070006c
00610079002c00200061006e00640020007000720069006e007400200063
006f006e00740065006e00740020006100730020007000650072006d0069
007400740065006400200062007900200074006800650020006c00690063
0065006e007300650020007400650072006d00730020006f007200200074
00650072006d00730020006f00660020007500730065002c0020006f0066
00200074006800650020004d006900630072006f0073006f006600740020
00700072006f0064007500630074002c0020007300650072007600690063
0065002c0020006f007200200063006f006e00740065006e007400200069
006e0020007700680069006300680020007400680069007300200066006f
006e0074002000770061007300200069006e0063006c0075006400650064
002e00200059006f00750020006d006100790020006f006e006c00790020
00280069002900200065006d006200650064002000740068006900730020
0066006f006e007400200069006e00200063006f006e00740065006e0074
0020006100730020007000650072006d0069007400740065006400200062
0079002000740068006500200065006d00620065006400640069006e0067
0020007200650073007400720069006300740069006f006e007300200069
006e0063006c007500640065006400200069006e00200074006800690073
00200066006f006e0074003b00200061006e006400200028006900690029
002000740065006d0070006f0072006100720069006c007900200064006f
0077006e006c006f006100640020007400680069007300200066006f006e
007400200074006f002000610020007000720069006e0074006500720020
006f00720020006f00740068006500720020006f00750074007000750074
002000640065007600690063006500200074006f002000680065006c0070
0020007000720069006e007400200063006f006e00740065006e0074002e
00200041006e00790020006f007400680065007200200075007300650020
00690073002000700072006f0068006900620069007400650064002e000d
000d00540068006500200066006f006c006c006f00770069006e00670020
006c006900630065006e00730065002c0020006200610073006500640020
006f006e00200074006800650020004d004900540020006c006900630065
006e00730065002000280068007400740070003a002f002f0065006e002e
00770069006b006900700065006400690061002e006f00720067002f0077
0069006b0069002f004d00490054005f004c006900630065006e00730065
0029002c0020006100700070006c00690065007300200074006f00200074
006800650020004f00700065006e00540079007000650020004c00610079
006f007500740020006c006f00670069006300200066006f007200200042
00690062006c006900630061006c00200048006500620072006500770020
201c004c00610079006f007500740020004c006f006700690063201d0020
006100730020006a006f0069006e0074006c007900200064006500760065
006c006f007000650064002000620079002000520061006c007000680020
00480061006e0063006f0063006b00200061006e00640020004a006f0068
006e00200048007500640073006f006e002e0020000d000d005000650072
006d0069007300730069006f006e00200069007300200068006500720065
006200790020006700720061006e007400650064002c0020006600720065
00650020006f00660020006300680061007200670065002c00200074006f
00200061006e007900200070006500720073006f006e0020006f00620074
00610069006e0069006e00670020006100200063006f007000790020006f
006600200074006800650020004f00700065006e00540079007000650020
004c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
0065007700200061006e00640020006100730073006f0063006900610074
0065006400200064006f00630075006d0065006e0074006100740069006f
006e002000660069006c00650073002000280074006800650020201c004c
00610079006f007500740020004c006f00670069006300200053006f0066
00740077006100720065201d0029002c00200074006f0020006400650061
006c00200069006e00200074006800650020004c00610079006f00750074
0020004c006f00670069006300200053006f006600740077006100720065
00200077006900740068006f007500740020007200650073007400720069
006300740069006f006e002c00200069006e0063006c007500640069006e
006700200077006900740068006f007500740020006c0069006d00690074
006100740069006f006e0020007400680065002000720069006700680074
007300200074006f0020007500730065002c00200063006f00700079002c
0020006d006f0064006900660079002c0020006d0065007200670065002c
0020007000750062006c006900730068002c002000640069007300740072
00690062007500740065002c0020007300750062006c006900630065006e
00730065002c00200061006e0064002f006f0072002000730065006c006c
00200063006f00700069006500730020006f006600200074006800650020
004c00610079006f007500740020004c006f00670069006300200053006f
006600740077006100720065002c00200061006e006400200074006f0020
007000650072006d0069007400200070006500720073006f006e00730020
0074006f002000770068006f006d00200074006800650020004c00610079
006f007500740020004c006f00670069006300200053006f006600740077
0061007200650020006900730020006600750072006e0069007300680065
006400200074006f00200064006f00200073006f002c0020007300750062
006a00650063007400200074006f002000740068006500200066006f006c
006c006f00770069006e006700200063006f006e0064006900740069006f
006e0073003a000d000d005400680065002000610062006f007600650020
0063006f00700079007200690067006800740020006e006f007400690063
006500200061006e0064002000740068006900730020007000650072006d
0069007300730069006f006e0020006e006f007400690063006500200073
00680061006c006c00200062006500200069006e0063006c007500640065
006400200069006e00200061006c006c00200063006f0070006900650073
0020006f00720020007300750062007300740061006e007400690061006c
00200070006f007200740069006f006e00730020006f0066002000740068
00650020004c00610079006f007500740020004c006f0067006900630020
0053006f006600740077006100720065002e000d000d0054004800450020
0053004f004600540057004100520045002000490053002000500052004f
0056004900440045004400200027004100530020004900530027002c0020
0057004900540048004f00550054002000570041005200520041004e0054
00590020004f004600200041004e00590020004b0049004e0044002c0020
00450058005000520045005300530020004f005200200049004d0050004c
004900450044002c00200049004e0043004c005500440049004e00470020
0042005500540020004e004f00540020004c0049004d0049005400450044
00200054004f0020005400480045002000570041005200520041004e0054
0049004500530020004f00460020004d00450052004300480041004e0054
004100420049004c004900540059002c0020004600490054004e00450053
005300200046004f00520020004100200050004100520054004900430055
004c0041005200200050005500520050004f0053004500200041004e0044
0020004e004f004e0049004e004600520049004e00470045004d0045004e
0054002e00200049004e0020004e004f0020004500560045004e00540020
005300480041004c004c002000540048004500200041005500540048004f
005200530020004f005200200043004f0050005900520049004700480054
00200048004f004c00440045005200530020004200450020004c00490041
0042004c004500200046004f005200200041004e005900200043004c0041
0049004d002c002000440041004d00410047004500530020004f00520020
004f00540048004500520020004c0049004100420049004c004900540059
002c0020005700480045005400480045005200200049004e00200041004e
00200041004300540049004f004e0020004f004600200043004f004e0054
0052004100430054002c00200054004f005200540020004f00520020004f
00540048004500520057004900530045002c002000410052004900530049
004e0047002000460052004f004d002c0020004f005500540020004f0046
0020004f005200200049004e00200043004f004e004e0045004300540049
004f004e00200057004900540048002000540048004500200053004f0046
005400570041005200450020004f00520020005400480045002000550053
00450020004f00520020004f00540048004500520020004400450041004c
0049004e0047005300200049004e002000540048004500200053004f0046
00540057004100520045002ea9203230313720546865204d6f6e6f747970
6520436f72706f726174696f6e2e20416c6c205269676874732052657365
727665642e200d0d486562726577204f70656e54797065204c61796f7574
206c6f67696320636f7079726967687420a9203230303320262032303037
2c2052616c70682048616e636f636b2026204a6f686e20487564736f6e2e
2054686973206c61796f7574206c6f67696320666f72204269626c696361
6c20486562726577206973206f70656e20736f7572636520736f66747761
726520756e64657220746865204d4954204c6963656e73653b2073656520
656d626564646564206c6963656e7365206465736372697074696f6e2066
6f722064657461696c732e54696d6573204e657720526f6d616e20697320
612074726164656d61726b206f6620546865204d6f6e6f7479706520436f
72706f726174696f6e2e4d6f6e6f747970653a54696d6573204e65772052
6f6d616e20426f6c6420284d6963726f736f66742956657273696f6e2037
2e303054696d65734e6577526f6d616e50532d426f6c644d544d6f6e6f74
79706520547970652044726177696e67204f6666696365202d205374616e
6c6579204d6f7269736f6e2c20566963746f72204c617264656e74203139
33324d6963726f736f667420737570706c69656420666f6e742e20596f75
206d617920757365207468697320666f6e7420746f206372656174652c20
646973706c61792c20616e64207072696e7420636f6e74656e7420617320
7065726d697474656420627920746865206c6963656e7365207465726d73
206f72207465726d73206f66207573652c206f6620746865204d6963726f
736f66742070726f647563742c20736572766963652c206f7220636f6e74
656e7420696e207768696368207468697320666f6e742077617320696e63
6c756465642e20596f75206d6179206f6e6c792028692920656d62656420
7468697320666f6e7420696e20636f6e74656e74206173207065726d6974
7465642062792074686520656d62656464696e6720726573747269637469
6f6e7320696e636c7564656420696e207468697320666f6e743b20616e64
20286969292074656d706f726172696c7920646f776e6c6f616420746869
7320666f6e7420746f2061207072696e746572206f72206f74686572206f
75747075742064657669636520746f2068656c70207072696e7420636f6e
74656e742e20416e79206f74686572207573652069732070726f68696269
7465642e0d0d54686520666f6c6c6f77696e67206c6963656e73652c2062
61736564206f6e20746865204d4954206c6963656e73652028687474703a
2f2f656e2e77696b6970656469612e6f72672f77696b692f4d49545f4c69
63656e7365292c206170706c69657320746f20746865204f70656e547970
65204c61796f7574206c6f67696320666f72204269626c6963616c204865
6272657720d24c61796f7574204c6f676963d3206173206a6f696e746c79
20646576656c6f7065642062792052616c70682048616e636f636b20616e
64204a6f686e20487564736f6e2e200d0d5065726d697373696f6e206973
20686572656279206772616e7465642c2066726565206f66206368617267
652c20746f20616e7920706572736f6e206f627461696e696e6720612063
6f7079206f6620746865204f70656e54797065204c61796f7574206c6f67
696320666f72204269626c6963616c2048656272657720616e6420617373
6f63696174656420646f63756d656e746174696f6e2066696c6573202874
686520d24c61796f7574204c6f67696320536f667477617265d3292c2074
6f206465616c20696e20746865204c61796f7574204c6f67696320536f66
747761726520776974686f7574207265737472696374696f6e2c20696e63
6c7564696e6720776974686f7574206c696d69746174696f6e2074686520
72696768747320746f207573652c20636f70792c206d6f646966792c206d
657267652c207075626c6973682c20646973747269627574652c20737562
6c6963656e73652c20616e642f6f722073656c6c20636f70696573206f66
20746865204c61796f7574204c6f67696320536f6674776172652c20616e
6420746f207065726d697420706572736f6e7320746f2077686f6d207468
65204c61796f7574204c6f67696320536f66747761726520697320667572
6e697368656420746f20646f20736f2c207375626a65637420746f207468
6520666f6c6c6f77696e6720636f6e646974696f6e733a0d0d5468652061
626f766520636f70797269676874206e6f7469636520616e642074686973
207065726d697373696f6e206e6f74696365207368616c6c20626520696e
636c7564656420696e20616c6c20636f70696573206f7220737562737461
6e7469616c20706f7274696f6e73206f6620746865204c61796f7574204c
6f67696320536f6674776172652e0d0d54484520534f4654574152452049
532050524f564944454420274153204953272c20574954484f5554205741
5252414e5459204f4620414e59204b494e442c2045585052455353204f52
20494d504c4945442c20494e434c5544494e4720425554204e4f54204c49
4d4954454420544f205448452057415252414e54494553204f46204d4552
4348414e544142494c4954592c204649544e45535320464f522041205041
52544943554c415220505552504f534520414e44204e4f4e494e4652494e
47454d454e542e20494e204e4f204556454e54205348414c4c2054484520
415554484f5253204f5220434f5059524947485420484f4c444552532042
45204c4941424c4520464f5220414e5920434c41494d2c2044414d414745
53204f52204f54484552204c494142494c4954592c205748455448455220
494e20414e20414354494f4e204f4620434f4e54524143542c20544f5254
204f52204f54484552574953452c2041524953494e472046524f4d2c204f
5554204f46204f5220494e20434f4e4e454354494f4e2057495448205448
4520534f465457415245204f522054484520555345204f52204f54484552
204445414c494e475320494e2054484520534f4654574152452e00540069
006d006500730020004e0065007700200052006f006d0061006e0020004e
00650067007200650074006100540069006d006500730020004e00650077
00200052006f006d0061006e002000740075010d006e00e900540069006d
006500730020004e0065007700200052006f006d0061006e002000660065
006400540069006d006500730020004e0065007700200052006f006d0061
006e0020004600650074007400540069006d006500730020004e00650077
00200052006f006d0061006e0020038803bd03c403bf03bd03b1004d0069
00630072006f0073006f0066007400200073007500700070006c00690065
006400200066006f006e0074002e00200059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
0074006f0020006300720065006100740065002c00200064006900730070
006c00610079002c00200061006e00640020007000720069006e00740020
0063006f006e00740065006e00740020006100730020007000650072006d
0069007400740065006400200062007900200074006800650020006c0069
00630065006e007300650020007400650072006d00730020006f00720020
007400650072006d00730020006f00660020007500730065002c0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000700072006f0064007500630074002c002000730065007200760069
00630065002c0020006f007200200063006f006e00740065006e00740020
0069006e0020007700680069006300680020007400680069007300200066
006f006e0074002000770061007300200069006e0063006c007500640065
0064002e00200059006f00750020006d006100790020006f006e006c0079
002000280069002900200065006d00620065006400200074006800690073
00200066006f006e007400200069006e00200063006f006e00740065006e
00740020006100730020007000650072006d006900740074006500640020
00620079002000740068006500200065006d00620065006400640069006e
00670020007200650073007400720069006300740069006f006e00730020
0069006e0063006c007500640065006400200069006e0020007400680069
007300200066006f006e0074003b00200061006e00640020002800690069
0029002000740065006d0070006f0072006100720069006c007900200064
006f0077006e006c006f006100640020007400680069007300200066006f
006e007400200074006f002000610020007000720069006e007400650072
0020006f00720020006f00740068006500720020006f0075007400700075
0074002000640065007600690063006500200074006f002000680065006c
00700020007000720069006e007400200063006f006e00740065006e0074
002e00200041006e00790020006f00740068006500720020007500730065
002000690073002000700072006f0068006900620069007400650064002e
000d000a000d000a00540068006500200066006f006c006c006f00770069
006e00670020006c006900630065006e00730065002c0020006200610073
006500640020006f006e00200074006800650020004d004900540020006c
006900630065006e00730065002000280068007400740070003a002f002f
0065006e002e00770069006b006900700065006400690061002e006f0072
0067002f00770069006b0069002f004d00490054005f004c006900630065
006e007300650029002c0020006100700070006c00690065007300200074
006f00200074006800650020004f00700065006e00540079007000650020
004c00610079006f007500740020006c006f00670069006300200066006f
00720020004200690062006c006900630061006c00200048006500620072
006500770020201c004c00610079006f007500740020004c006f00670069
0063201d0020006100730020006a006f0069006e0074006c007900200064
006500760065006c006f007000650064002000620079002000520061006c
00700068002000480061006e0063006f0063006b00200061006e00640020
004a006f0068006e00200048007500640073006f006e002e0020000d000a
000d000a005000650072006d0069007300730069006f006e002000690073
00200068006500720065006200790020006700720061006e007400650064
002c002000660072006500650020006f0066002000630068006100720067
0065002c00200074006f00200061006e007900200070006500720073006f
006e0020006f0062007400610069006e0069006e00670020006100200063
006f007000790020006f006600200074006800650020004f00700065006e
00540079007000650020004c00610079006f007500740020006c006f0067
0069006300200066006f00720020004200690062006c006900630061006c
002000480065006200720065007700200061006e00640020006100730073
006f00630069006100740065006400200064006f00630075006d0065006e
0074006100740069006f006e002000660069006c00650073002000280074
006800650020201c004c00610079006f007500740020004c006f00670069
006300200053006f006600740077006100720065201d0029002c00200074
006f0020006400650061006c00200069006e00200074006800650020004c
00610079006f007500740020004c006f00670069006300200053006f0066
0074007700610072006500200077006900740068006f0075007400200072
00650073007400720069006300740069006f006e002c00200069006e0063
006c007500640069006e006700200077006900740068006f007500740020
006c0069006d00690074006100740069006f006e00200074006800650020
00720069006700680074007300200074006f0020007500730065002c0020
0063006f00700079002c0020006d006f0064006900660079002c0020006d
0065007200670065002c0020007000750062006c006900730068002c0020
0064006900730074007200690062007500740065002c0020007300750062
006c006900630065006e00730065002c00200061006e0064002f006f0072
002000730065006c006c00200063006f00700069006500730020006f0066
00200074006800650020004c00610079006f007500740020004c006f0067
0069006300200053006f006600740077006100720065002c00200061006e
006400200074006f0020007000650072006d006900740020007000650072
0073006f006e007300200074006f002000770068006f006d002000740068
00650020004c00610079006f007500740020004c006f0067006900630020
0053006f0066007400770061007200650020006900730020006600750072
006e0069007300680065006400200074006f00200064006f00200073006f
002c0020007300750062006a00650063007400200074006f002000740068
006500200066006f006c006c006f00770069006e006700200063006f006e
0064006900740069006f006e0073003a000d000a000d000a005400680065
002000610062006f0076006500200063006f007000790072006900670068
00740020006e006f007400690063006500200061006e0064002000740068
006900730020007000650072006d0069007300730069006f006e0020006e
006f00740069006300650020007300680061006c006c0020006200650020
0069006e0063006c007500640065006400200069006e00200061006c006c
00200063006f00700069006500730020006f007200200073007500620073
00740061006e007400690061006c00200070006f007200740069006f006e
00730020006f006600200074006800650020004c00610079006f00750074
0020004c006f00670069006300200053006f006600740077006100720065
002e000d000a000d000a00540048004500200053004f0046005400570041
00520045002000490053002000500052004f005600490044004500440020
0027004100530020004900530027002c00200057004900540048004f0055
0054002000570041005200520041004e005400590020004f004600200041
004e00590020004b0049004e0044002c0020004500580050005200450053
00530020004f005200200049004d0050004c004900450044002c00200049
004e0043004c005500440049004e004700200042005500540020004e004f
00540020004c0049004d004900540045004400200054004f002000540048
0045002000570041005200520041004e00540049004500530020004f0046
0020004d00450052004300480041004e0054004100420049004c00490054
0059002c0020004600490054004e00450053005300200046004f00520020
004100200050004100520054004900430055004c00410052002000500055
00520050004f0053004500200041004e00440020004e004f004e0049004e
004600520049004e00470045004d0045004e0054002e00200049004e0020
004e004f0020004500560045004e00540020005300480041004c004c0020
00540048004500200041005500540048004f005200530020004f00520020
0043004f005000590052004900470048005400200048004f004c00440045
005200530020004200450020004c004900410042004c004500200046004f
005200200041004e005900200043004c00410049004d002c002000440041
004d00410047004500530020004f00520020004f00540048004500520020
004c0049004100420049004c004900540059002c00200057004800450054
00480045005200200049004e00200041004e00200041004300540049004f
004e0020004f004600200043004f004e00540052004100430054002c0020
0054004f005200540020004f00520020004f005400480045005200570049
00530045002c002000410052004900530049004e0047002000460052004f
004d002c0020004f005500540020004f00460020004f005200200049004e
00200043004f004e004e0045004300540049004f004e0020005700490054
0048002000540048004500200053004f0046005400570041005200450020
004f0052002000540048004500200055005300450020004f00520020004f
00540048004500520020004400450041004c0049004e0047005300200049
004e002000540048004500200053004f004600540057004100520045002e
00540069006d006500730020004e0065007700200052006f006d0061006e
0020004e00650067007200690074006100540069006d006500730020004e
0065007700200052006f006d0061006e0020004c0069006800610076006f
00690074007500540069006d006500730020004e0065007700200052006f
006d0061006e002000470072006100730073006500740074006f00540069
006d006500730020004e0065007700200052006f006d0061006e00200046
00e9006c006b00f6007600e9007200540069006d006500730020004e0065
007700200052006f006d0061006e002000560065007400540069006d0065
00730020004e0065007700200052006f006d0061006e002000480061006c
007600660065007400540069006d006500730020004e0065007700200052
006f006d0061006e00200050006f00670072007500620069006f006e0061
00540069006d006500730020004e0065007700200052006f006d0061006e
0020004e00650067007200690074006f00540069006d006500730020004e
0065007700200052006f006d0061006e0020041f043e043b044304360438
0440043d044b043900540069006d006500730020004e0065007700200052
006f006d0061006e002000540075010d006e00e900540069006d00650073
0020004e0065007700200052006f006d0061006e0020004b0061006c0131
006e00540069006d006500730020004e0065007700200052006f006d0061
006e0020004b007200650070006b006f00540069006d006500730020004e
0065007700200052006f006d0061006e0020011100e20323006d00540069
006d006500730020004e0065007700200052006f006d0061006e0020004c
006f006400690061410c00540415029a001d001f0415041504140413003c
001f0413b3061d1f20b8040cb30c0e3220b8040cb2131732b8040bb32820
1f0f41100412008004120002000f0412003f0412005f04120003005f0412
000100400412b2783340b80412b2723340b80412b26e3340b80412b26a33
40b80412b2543340bc0412004a0033ffc00412b317183240b80412b30a0c
3280b80412b308093240b80411b25a33404109041100560033ffc0041100
530033ffc00411b2503340b80411b24d3340bc041100470033ffc00411b3
44453240b80411b2423340bc0411003e0033ffc00411b23a331f41240411
00200411004004110070041100af041100f004110006000f0411002f0411
0090041100ff04110004002f041100400411007f0411008f041100a00411
00e004110006ffc00411b208330f411b0410008f04100002000f0410001f
0410002f0410000300600409000100b004090001000f0408003f0408004f
0408009f04070004040ab2006c1fb9ffc00403b345453240b80403b32b2e
3240b80403b2282932b9ffc00403b21a1c32bd040302990027001fffc004
01b2161b32b9ffc00400b2424232b9ffc00400b2363832b9ffc00400b32a
2d32df410a040000ef04000002040004010028001fffc00401b3282e32f0
bf0401000103fe000f0101001fffc003fcb310143240b803fdb30f133240
411003f9005003f9000200b003b100c003b10002006f03f5007f03f50002
ffc003afb22d3132b9ffc003afb30a0e3210411003ef002003ef008003ef
000300a003ef0001002003ef004003ef0002ffc003efb313163240b803e7
b20f1132b9ffc003dfb2303432b9ffc003dfb310183250411403dc000103
c903d20023001f03e203d2001e001f03c703d2001d001f03c603c8000d00
1fffc003a4b30f103280411003a3000103a303790029001f03a5037a0032
001f03a8037e001b001fffc003d9b20e1132b9ffc003d9b2282a32410a03
a7037c0032001f037303710034001f036c036bb2321f20bb03a400010040
03ecb3090b3240b803ecb2101532bd03e9036b0014001f03e4036bb2171f
0fbd036e002f036e0002ffc003b8b3090d3290410c03b800a003b8000200
1f03d20001009f03d20001004003d2b2090b32410a03a903800016001f03
cf03810015001f03aa0382b2151fc0bb03f70001004003f6b3090d3240b8
03a2b2083340b803a2b30d0e32c0410903a2000100b003f200c003f20002
ffc003f4b3263832004126038c0030038c0002002003e3003003e3000200
1003ee003003ee005003ee006f03ee007f03ee009f03ee0006000003ed00
3003ed0002002f03de007003db009003db009f03de0004ffc00379b20f10
32b9ffc00379b2242832b9037d037cb2321f10bb037e0001ffc0037eb309
0e3240b8037cb2121332b9ffc0037cb30c0e323fbd03d7004f03d7000200
4003d8b31718326fbb038e000100400390b3181b3240b803d4b2090c32bd
037b037a0032001fffc0037ab20e1132bd038003820016001f03810382b2
151fb0be03820001000f03830001004003ffb30c11327f41140354000100
6f0354008f035400d0035400ef03540004000f0354002f0354005f035400
0300400350b30e0f320fbb035a000100400349b20e331fbd0348007f0348
0002ffc00348b2152232b9ffc00347b2152232b9ffc0040fb21b1e32beff
c0040f002d01000032040e0406b22f1f51bb034b0001034f034eb2641f40
b80351b20e0f32b9ffc0034eb3383a3230bb034e0001ffc0034eb21f2332
b9ffc0034eb2131932b9ffc00346b2091132b9ffc00343b30a11320fbb03
440001ffc0032bb2080e32b9ffc0032bb2161b32b9ffc0032ab31417321f
4110033a0001000f03330001000003370020033700300337008003330004
ffc00332b310123250416403320001004003320060033200a0033200b003
32000400100332003003320050033200e003320004000f0336007f033600
ff033600030070033600f003360002000f0331003f0331008f033100bf03
3100e003310005000f0331006003310002008f0330000100600330009003
3000020050032f00010010032f0040032f0060032f0080032f00a0032f00
c0032f00f0032f000700cf032d00ff032d00020030032d0080032d00b003
2d00df032d0004006f032c007f032c00020012032000fd0800001f007f02
99403a017f007f017f027f037f047f057f107f11084035252c32406a252c
32402e252c324028252c3237600970098009033009400950090310092009
02b8ffc0b2073a33b8ffc04012063a33da4dea4dfa4d0312379006900702
cf410c011100df011100ef0111000300cf011000df011000ef0110408703
cf3edf3eef3e03cf4ddf4def4d03cfdedfdeefde03cf2ddf2def2d03404d
1b3a32375f016f017f018f01041f012f013f014f01045f036f037f038f03
041f032f033f034f0304600b700b800b03300b400b500b03100b200b0290
0ba00bb00bc00bd00b05b006c006d006e006f00605500660067006800690
06a006061f072f073f07400604f0414302db000100a002db00b002db0002
008002db009002db0002001002db000100c002db00d002db0002009002db
0001006002db007002db0002004002db005002db0002002302db003002db
000202db002300a002da0001008002da009002da0002004002da00010023
02da003002da000202da0023000002d90001007002d9009002d9000202d9
401c2230244024021024202402002401f02401d024e02402b024c02402c0
413a02d8000100a002d800b002d80002008002d8009002d80002002302d8
003002d8000202d8002300c002d7000100a002d700b002d70002008002d7
009002d7000200a002d700b002d70002008002d7009002d70002006002d7
007002d70002004002d7005002d70002002302d7003002d7000202d7b223
370f4117029b0001005f029b009f029b00df029b0003002f029b003f029b
006f029b0003001f029b0001029b029b0040029ab3272c3280b8029ab226
3340b8029ab2223340b8029ab21e3340b8029ab21c3340b8029ab3191a32
5f410f029a009f029a00df029a0003000f029a001f029a003f029a0003ff
c00299b2443340b80299b23d3340b80299b23a33df413902990001005f02
9900af02990002004f0299009f02990002002f0299003f0299000200af02
990001000f0299003f0299000200b0029900e0029900020070029900a002
990002004f0299005f02990002000f0299001f0299002f0299003f029900
04029a029a02990299000f027a002f027a400b0200161600000012110812
b802bab269121fb802b4b228101fb802b3b228101fb802b2b228101f4113
02030023000d01ee0023000d01ae0023000d019f0023000d01940023000d
01570023000d010f400b230df9230dc5230da7230d410a024a0024000d01
f00024000d01e90024000d016a400e240de8240dc6240da3240da2240dbb
01e30022000d0121401a220de5220ddd220db7220daa220d93220d5c220d
51220d4c220d410a02280020000d021d0020000d015e0020000d011c4017
200dfc200de1200dcb200dc8200da1200d59200d3a200d410a01f2003400
0d019c0034000d01970034000d0135b7340d1f340d1d340dba0202000f01
5bb20f0009bb0202015b000d030ab22a3e1fb80309b22a3e1fb80221b24d
251fb8021cb24d411fb8021bb24d521fb8021ab24d721fb80213b24d931f
4109020f01b10401001f020e01b10801001f020cb22a811fb8020bb22a81
1fb80208b22a5e1fb80205b22a391fb801feb22a231fb801fbb2661d1fb8
01fab2661e1fb801f6b266341fb801f5b266341fbc01f300660201001f01
f1b2669e1f410901ea00280801001f01e7002602ab001f01b8b24d3f1fb8
01b7b24d931f410901b4003e0125001f01b200400401001f01acb22a721f
b801a8b22a281fb801a7b22a241fb801a6b22a241fb801a3b22a1f1fb801
a1b2662e1fb8019eb266931fb8019db266e41fb8019ab2286c1f41090199
00280401001f019800260401001f0173b24d1b1fb80171b24d241fb80170
b24d2f1fb8016fb24d351fb8016bb23ecd1fb80169b23ee41f4109016701
b1019a001f0166002a02ab001f0161b2662a1fb8015fb2669e1f4109015d
0028019a001f015c00350401001f0147b24d391fb80146b23ecd1f410d01
45003e0125001f014401430101001f014201b102ab001f0140b22a301fb8
013eb22a261fb8013db2661d1fb8013cb2662b1fb80138b228811fb80137
b2289e1fbc01360028019a001f0129b24d721fbc0124002a0201001f0123
b22aab1fb8011fb266291fb8011eb266451fb8011bb228811f4109011300
3e0125001f0112003e0401001f0111b22a291fb80110b22a201fbe010b00
66019a001f010a0026019ab61ffd4d721ffb3eb80156b21ffa40b80801b2
1ff728b80801b61fec4d621feb4db80401b21fea40b802abb61fdf4d721f
de3eb802ab400b1fdc2ae41fdb66221fca2ab80401401b1fc92a2e1fc326
791fb828bb1fb34d1e1fb166291fb066621faf66b80401b21fae26b802ab
b21fa828b80201400b1fa0664c1f982a2b1f9726b8019ab61f9266291f87
40b802ab401b1f852a791f8226811f754d931f744d891f732a1d1f70285e
1f6a28b8040140171f692a521f682a201f6766291f6566671f612a931f60
35b80801b61f5e2acd1f5335b80801b21f4b66b80156b21f493eb80801b6
1f4866521f4626b80201b21f3f66b80156400b1f3b66341f322a931f2e35
bb0401001f002d0143b3cd1f5537bc022f0007018000070172402e07bd07
7e076207540742072f072707250721071e071408120810080e080c080a08
08080608040802080008000214b8ffe0402b000001001406100000010006
04000001000410000001001002000001000200000001000002010802004a
00b013034b024b5342b0372b4bb807ff52b0382b4bb008505b58b101018e
59014bb0c063004b6220b0f65323b8010a515ab005234201b0124b004b54
4218b0382bb00288b801005458b801ffb101018e851bb0124358b9000101
2c858d1bb900010146858d59590016763f183f123e113946443e11394644
3e113946443e113946443e11394660443e113946604445442b2b2b2b2b2b
2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d
59b0324b5358b0ff1d594bb02953205c58b9026c026a4544b9026b026a45
445958b90168026c455258b9026c01684459594bb03b53205c58b9003e02
6b4544b9004d026b45445958b9025c003e455258b9003e025c4459594bb0
3b53205c58b901b1003e4544b13e3e45445958b9024f01b1455258b901b1
024f4459594bb05a53205c58b90143003e4544b13e3e45445958b9038b01
43455258b90143038b4459594bb09e53205c58b9002a026c4544b9004002
6c45445958b9056c002a455258b9002a056c4459594bb01853205c58b126
264544b1662645445958b13226455258b126324459594bb05153205c58b1
26264544b1282645445958b1ad26455258b126ad4459594bb8010153205c
58b126264544b1352645445958b902280026455258b9002602284459592b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b33d76
6e58456523456023456560234560b08b766818b080622020b16e76456523
4520b003266062636820b003266165b076236544b06e234420b13d584565
234520b003266062636820b003266165b058236544b03d2344b100584554
58b158406544b23d403d4523614459b34e81387145652345602345656023
4560b089766818b080622020b138814565234520b003266062636820b003
266165b081236544b038234420b14e714565234520b003266062636820b0
03266165b071236544b04e2344b10071455458b171406544b24e404e4523
6144594b5242014b5058b108004259435c58b108004259b3020b0a124358
601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
007418456944456944737373737474757575752b2b2b73732b2b2b2b2b2b
18456944737373742b454473737373737474744544737474747474747575
754544737545447373747445447373737373747474740075757575757575
757575752b2b74747474747400732b4358b14d4d451869441bb8ffc0b34d
1b3a322b5973002b2b7575752b2b2b2b2b0073732b435c58b8ffc0b20716
33b8ffc0400b061633d54de54df54d03c0410c011100d0011100e0011100
0300c0011000d0011000e00110401e03c03ed03ee03e03c04dd04de04d03
c0ded0dee0de03c02dd02de02d03372b74747474747473002b2b59017373
7473747374737473747374752b737573002b2b2b01732b2b2b2b752b2b2b
732b2b2b002b2b742b732b7373742b73732b2b2b2b2b2b732b732b2b2b74
2b2b2b73737373732b73732b2b2b73002b2b2b2b7374732b732b2b2b2b75
2b2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b2b7374752b2b7373732b2b2b
752b2b732b2b2b2b2b2b2b2b2b2b73747573742b7374752b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b002b2b4569442b2b00>
[16165 16281 951 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 3202 36 <00020010000005b00568002100240130409322100b123f66107610772387
108623aa0db71007960db30d020124230200222323210a0e0b1d0a172118
1d170b09010902081d091611151d1601240a00221673230f102023002110
2102212302212d1110141111102302232102280e0f140e0e0f02760e010e
0a7a11012111100f04162321110e02040117230f2224280000010101e410
40100f031716160a0a09080f160116ba01820023012e4023200a19302670
268026a026d026e0260625102620264026502680269026b026078f6d182b
4e71105df4191a4dfded5d00183f3c103c103c3f3c1a10fd5d3cfd3c1139
1112173901111217395d12395d39870e2e2b087d10c4870e2e182b087d10
5dc42b113939113939180010ed0110c00010ed0110c05d0010ed0110c000
10ed0110c007103c3c073c3c3130005d015d012b01210706151417161715
2135363637013301161716171521353332373635342726272703030354fe
21391c2e1b6afe3d495e4501e51301e9462d223efd701b4f201606021c6a
cad0018284422b391b100825250b639b043afba89e291f05252516101e12
130942f301d3fe2d>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 3630 37 <0003002b0000050e054c001b002400310155409198170112651b76027630
a718ab2cba1eba2ccc07dc2df92f0a280138014801491b5502591b650286
028430a801c72cd42ce61ee822f61ef822f83011480826251c2424270e20
1d0922220f201d14222330251e0324002e2030312a00251e241c00000914
1c2e25250914242e151514022a2e08080908002010200220de199d12041a
3324310f271f2702272d0f0e193233b80104b3213d58182b2b4ef43c4dfd
5de44e10f64d4358b6002e102e022e4de95d1bb12e4ded59f4ed5d003f3c
10ed3f3c10ed1112392fed191112392f1112391239111239011112391217
39182b2b07100e3c3c3c3130437940322b2d212316180507172522261725
06262c252316202f012216202f012b072e2f012118242f012118232f0122
232d052a2f00002b103c2b2b012b2b2b2b2b2b2b2b81818181005d015d43
5c5840127a30e92d02262c2b303922592c862cd60706005d015d59005d01
161716151407062121353236363511342626233521321616151406053236
36353426260711110714163332363635342626038fc14e707b97fee0fd4f
5e431b1b445d028ae9c2708efde18e8748478492013736508748589a02cf
2d405b919964792523386e03706e39222553a55d62991240745a5a733c01
fd9cfe4d3236374787535f973c00>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 4124 38 <00010051ffe10557056b0024011db90016ff80b3090a341cb8ff80b3090a
3406b8ff80b3090a340db8ff804059090a340c1a091b36134d1a86168b1a
8f1b891c086b116b12791179128911a706a80da517c717cb1b0a06160026
4316411c80168517861b841cb704bb1e0a2f26681f7706760d761b8613ba
0f07370e1112241d005a021d0101b80114401d005a21a911120e056a1d03
0e6a1509015f2f1101111a7026012612256eb9013200182b4e1043584009
0f0a1f0a020a4d1919f44de95d1bb30a4d1919f44ded594e105df65d4de4
003fed3fed113939ecf4ed0110edf4ed0010c931304b5379b13208437940
24161c060d0c2617250809070902061b260d160a2500061c0a25000b180e
2500091a0525012b2b012b2b2b2a2b2b8181015d71005d71012b2b2b2b01
112326262322060706151412163332363715060623222402353412243332
1716333236370557272cf0987fd4313f5cc49c80d57672f7a5d9feafb7cb
0159c28f9f5c19202f07056bfe2ab8c4927697b9b6fed599708975776bae
0146b8c2015cc03e242f3300>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 4526 39 <0002001b00000571054c001b002b010b405c1a80090a342380090a341080
090a342b80090a346713681867259a29b8280567116913681897119816a4
1306630e07201d00222208201d0e22231c2e0f0e0222351b1b0008122d1c
0f1d1f1d021d3e08300701500701077d2c3db5182b4e10f45d713c4dfd5d
3c4d10435840100026102602264d001410143014031436f65d4de95d1bb6
264d3014011436f65d4ded59003f3c10ed3f3ced2b2b31304b5379b15e08
4379404a232b101a121311130206282729272a2703061213111302062827
292702061615171518151915040624252b102625012a10262501231a2625
0127131c250127132b25012a2b25152225002b103c2b2b012b2b2b2b2a2a
2a2a2a8181005d015d2b2b2b2b3335333236373635113426262323352132
17161215140e02070623031114161716333237361110272627261b2d3b3f
0f091643392d025ff394b5bb5c92bf8a3d835a10131b33a7587852416648
2525201569037c683427254251feb8cf8ff19d5f1a0c04fffbde54260a0f
729a014401059c7a2c1f>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 4926 40 <00010029000004fa054c0031014e40ed16041909022033303370339033a8
17d714d717e617f71709790a74157c2e8903921405890a9803980a9315a8
03a80a0620144515403350337903050a030a0a023340140c3f94049c09a4
04ae09a614050c010007510c0ccb081d0720201d1822222b513131e12c1d
2b06510101cb051d0621201d2922230106000c070d001510150215162b14
15160317071716b3122e18312829012e0c0c182902180806070f074f0702
3f074f078f07af07cf07df07060f076f0702073233af2bbf2b022f2b3f2b
4f2b5f2b6f2b7f2b8f2b9f2b082b8310167016901603161a40330133000f
0d1f0d020d3e212019323db5182b4e10f43c4dfd5d3c4e105df65d4de45d
711112395d71722f3c003f3f12392fed10ed10eded3c1112173901111239
5d1112391112392b0110edec0010fd0110edec0010fd2b0110edec0010fd
0310053c3c3130005d012b715d5d5d5d00710111333236373311232e0223
111416163333323637330321353332373637363511342726272623233521
11232626272623022e1b81741026260c4d666113343a51bee532253dfb6c
2d3b241a0e0b050a1b26422d046f261d6960389a04fefdd8a29efd3a7494
33fe82703220b0b4fe5125150e221866037c5c1523131c25fe6f93801e12
>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 5406 41 <0001002e000004a6054c002c0121404d0704090a2c03220b4a0b05060506
0a260226032604260a260b260c4f03460a4f0b660a760a860a0e7a29902e
b504b50ac604c60ae604e60af605f60a0a0e201d1422231d201d15222226
512c2cb80228406a271d260f080108510c0ccb091d0800070107510202cb
061d071e201d24222308070726020c4f0d024f0126bf2501251ab02e012e
00010d0f0e1f0e020e3e1d0f001f0002003e1e1e1d192d14152c28240228
01280c0d0d24140e1d3914152c2825002825240215082d2ebc0102002100
3d010700182b2b003f3f3ced10ed103cf43c1112392f3ceded10ed103c01
4e10f43c4d10ed5d10fd5d3c3c3c4e105df65d3c4d10e610e61112392f3c
2b0110edec0010f55d0110edec0010f55d0110edec0010f52b2b3130015d
710071011133323636373311232626232311141616333315213533323736
3736351134262623233521112326262726230233275a724f0c232313a96b
271743392dfd3b2d3b241a0e0b1643392d0478290e736d3ca204fefdd336
806dfd57c17bfe616834272525150e221866037c68342725fe7b89841b0f
>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 5826 42 <00010053ffe00624056c0033016c40160a10052403250e29781f881f8424
84258d29882a0a23b8ff80b3090a340cb8ff80b3090a3406b8ff80b3090a
342ab8ff804043090a346807680b770b7724b903be04b806b724b726b72a
0a44234629402a8729862a059926972aa706a307a80bc525cb29074a0e18
401b103f7018011ec81d185c2217b8ffc040141b103f7f170111c81d1722
23331d005a021d0101b801144022005a30a92b1e1f01101f0d1718182205
352b030d3522090011101102113e011e1a35b8ffc040090c103435122819
3435bc01530021006e01e000182b2b4ef44d4358b60f091f0902094de95d
1bb1094ded594e102bf63c4ded5d003fed3fed12392f3c12393901123939
0010ecf4ed0110edf4ed2b015d2b2b015d2b3130004b5379b14508437940
32202a060f0b26262725272427030607250c230925000e21104201201f0f
10062a0925000a270d25000f200d420008290525012b2b2b012b103c103c
2b2b2b2a2b8181005d01715d2b2b2b2b0071011123262423220602151412
163332363711342626232335211506060706151106042322262627263510
0021321716163332363705852543fef49f98ca545ccd8d31673616453123
02934b3b100982fee797c1ffc3374601ae014665512cc5121c3014056bfe
22c4ccabfecea1c3feda8a1514011a502f262525051f24134afee63a3b69
ab6b8aab013201a610084b293900>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 6350 44 <00010029000002ee054c001f008a402d2140371c3f0a201d0222221a201d
1222221b201d0122230b201d1122231211020201081a0f1b1f1b021b3e0b
0ab8ffc0401846233fe00a01300a400a700ac00a045f0ac00a020a192021
b8ffc0401b1b1d34e021017021c02102302140215f218021b021c021063d
76182b4e5d71722b10f45d71722b3c4dfd5d3c003f3c3f3c2b2b2b2b3130
012b25152135333237363736351134262623233521152322070607061511
1416163302eefd3b2d3b241a0e0b1643392d02c52d3b241a0f0b17433925
2525150e221866037c6834272525150e221866fc84683427>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 6584 45 <00010016ffe103f4054c002a0057400a0a201d02222226201d01b802d440
182315150f02010221350f09260025102502253e0a9f0b010bb80162b32c
1d1d18b80166b3124f2b8fb901e000182b10f6ed392f10f65d3cfd5d3c00
3fed3f3c12392f2b2b313001352115232207060706151114060623222635
343633321615140706061514171633323636351134262623012302d12c3c
24190f0b4ec78cabd3563e3d530704371a263d2b38171743390527252515
0e221866fd68c3b177b46d46574e391c150a51111a131c2c5dd402d56834
2700>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 6796 47 <000100260000050d054c0025008f4036620177017b2370270490239024a6
24030a201d0222221a201d124c220b201d112223242322031b2324000025
102570258025a0250525b801b94010202128021211020108020825d2009d
01b802af40161a0f1b1f1b021b3e0b0a192630274027a027033d58182b4e
5d10f43c4dfd5d3cf4f4fd003f3f3f3c10fd3cf45d3c3939011117392b2b
2b3130005d015d0103213533323736373635113426262323352115232207
060706151114161716333332363637050d33fb4c2d3b241a0e0b1643392d
02d33b3b241a0f0b18231960716c90692f01dcfe2425150e221866037c68
34272525150e221866fca068390e094ca4a0>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 7054 48 <0001002900000768054c0036014f40721e100b123f0b1e01091e7b1e0230
3845365038a700c80005251c36017700771c771d8600871c871d991da81d
ea1dfa1d0c7038e038021f121f131f1410241025050f120f130f14002400
250936060a201d0222221a201d1222222e3a1d2622220b201d1122231f3a
1d2522232f201d352223b8ff884043001d1c20010000281c1b141c1c1b00
363600002d1d1e141d1d1e0001361d1c031f011a00363502010226251d1c
121108000037381b101a011a3e0acf0bdf0b020b1a38b8ffc040091c1e34
7038e0380238b8ff804009151634381e1f282f2eb8ffc040111c1e34702e
e02e02c02ed02e022e193738b80154b3213d7618b8012c852b2b4ef45d72
2b3c4dfd3c4e102b722bf65d3c4dfd5d3c191112392f18003f3c3c3c3c3c
3f3c3c3c0111123912173908872e2b057d10c408872e182b057d10c42b18
2b2b2b2b2b2b3130015d5d725d71005d00712b0101211523220706070615
111416163333152135333237363736351101230111141716163315213533
163636373635113426262323352103d0017002282c3c24190f0b1644392c
fd3c2c3c24190f0bfdf818fdf0050d575dfe300e2d4e280b021644392b02
2a01ce037e25150e211865fc826834272525150e22186603edfb2b04ccfc
456417323f2525011f342f0b5b035a6733272500>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 7554 49 <0001001dffe10597054c00210171b2121221b8fff8b20d3921b8fff84077
0c39101c1c0f101c1d1d0f0d3a1d0822221b201d172222023a1d07222311
201d164c230021102102211d201d21101c17010f1d1d3e0001140000011d
1b2200110f0e01011d17210808070700021716080f090102280e0f0d015f
0d010d7d502301231011281c001b01501b01001b6f1b021b7d223d76182b
4e10f4715d723c4dfd3c4d105df65d723c4dfd3c003f3f3c3f3c103c103c
123939011112391239111239870e2e2b87047dc4001239391810ed0110c0
5d2b2b2b2b87103c7dc48710c4012b2b31304358b90000ffb0402b133500
0f100f370072207021802080219100900f90209021b400b4210d04200421
2a04270b22132a1a0610b8ff5bb2133510b8ffa640131235040100101401
10109001a01cb010b01c08005d2b2b01715d2b59435c58b51008141b3f10
b8ffe0400912183f00080e133f00b8fff0400912183f00080f143f0fb8ff
e7b3141b3f0fb8ffdab20e173f012b2b2b2b2b002b2b5901011134272607
3521150e0215112301111416333315213536363511272626273501fe029d
23307101c0563b2122fc6b6b4520fe1f70581d2b423e054cfcb702477a2b
3a0225250b234f60fb970469fca275522525015a6c03bd2436220225>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 8032 50 <00020050ffe105f0056b000d001e01ab403368106813980ad712d719d81a
d81cd71de712090718071e1702180c171a171c271027132714281a0a1e80
090a341780090a3415b8ff80b3090a340fb8ff80b3090a340db8ff80b309
0a3408b8ff804064090a340680090a340180090a34129701960299069908
960c970da602a60cc705c709c61dd701d70d0d020407080609060a170117
02170c170d161d096619661c7805770c7619761d970fb618b61dd71bf008
0b560e0e35000316350709120b191f6e58182b4e10f44d43584019001b10
1b021b4d400301031a2f203f2002200f121f1202124de95d4e105df6714d
e95d1b400f1b4d400301031a2f203f200220124ded4e105df6714ded5900
3fed3fed31304b5379b151084379403c011e10251d26142609250526191a
181a02060f0d1225001e011b2501150812250017061b2501110c0e25010d
1c020e250101130a1625001a041625002b2b3c2b3c2b012b2b2b2b2a2b2b
2b2b2b81015d00715d435c58b40806123905b8fff4400b1239021812390c
18123902b8ffe8b211390cb8ffecb2113905b8ffe8b20d3909b8ffecb10d
39002b2b2b2b2b2b2b2b59012b2b2b2b2b2b2b2b01715d01240011100702
212027261110000522070611101716333237361235100226031701440195
97c8fe93fe92c89e019b0138ba614f7a559967455862649b055f0cfe6efe
d2fefec4fefcf8c4010d012e01934cbe9cfedcfea5a67432400119e2010d
010b6e00>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 8576 51 <00020034000004a5054c001a002400cfb90020fff8b20c3920b8fff8405c
0b394f26019718f617f620f922042a081c00010c201d07222201201d0622
230d201d1222231b2e12002e1c1c0613120207060810210121de60168016
9f1603168a2f2601261b0f011f0102012d0d000c100c02500c600c020c7d
2526bc01020021003d010700182b2b4ef45d723c4dfd5d3c4d105df65d4d
ed5d003f3c3f3c12392fed10ed2b2b2b0310053c3c31304379401e1f2314
1a1817191702062314212f011f1a212f012215242f0120171e2f00002b2b
012b2b2a8181005d015d002b2b0111141616331521353236363511342626
233521201615140607060311163332363534262302291b455cfd4f5e431b
1b445d024f0124fea49061e721117a8484830266fe886e3922252523386e
03706e392225d09c84bc22180298fdb6029198978c00>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 8898 53 <00020026000005d9054c0023002d0178403f551a721a981503082318234b
1a471c4722611c63220712000500061005100604302f671b771b77228823
cc1bcb23d02f089916d41af918fb19fb1a052f080cb802d5b41d07222201
b802d5b41d0622230db802d540391d1222231c1b001b101b021b2d232214
2323227f238b230223002a1c211b8022e422f4220310225022d02203d022
0122172a1c222326252e1bb801e2401723000006242d2e1313120220d221
212222060607082021b8010540090c002a102a022ade17b8030240160c24
252500000f011f0102012d0c0c500d010d7d2e3db9011900182b10f65d3c
10fd5d3c103c103c10fded5d10fd3c003f3c103c103c10ed3f3c10fd3c12
392f3cedfd3c1112390111123971725d3911391112395d870e2e2b5d0e7d
10c4182b2b2b313043794020272c141a1525192628252c142a2f01271a2a
2f012b162d2f012918262f001a1b103c2b2b012b2b2b2b2b8181005d015d
5d435c58b90028fff8400b0c392b080c391c1813153e012b002b2b59015d
005d01111416163315213532363635113426262335213216161514070607
01161716171521010311333236363534262302201b445dfd4a5e431b1b44
5d0276f6e4906c457c0146401b2936fe55fe4b59398b8a4f91a1026afe84
6e3922252523386e03706e39222544b77b96623e1ffe3559161f0325026a
0299fdae33856b9b9400>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 9418 54 <0001006affe00421056b0039012d403918305729772103060e01090f072b
0630180f172b2d0f2b1029112f22202b242c362a362b67298929892aa934
b82aba3413391d005a021d0101b801494015005a0f361f360236a9311d1d
1e5a201d1f201f011fb8017840461e5a001a101a021aa915292b0f08260f
0b0f0f1c0b1c0f04760f76299b0fa50bb50bc40f062b290f0b0423053531
03233515094f015f016f017f018f01050157002610260226b80110400e12
1a3b400b0d343b0f081f080208b80110b41f312e193ab80139b158182b4e
10f44de4ed5d4e102bf64ded5de45d003fed3fed1117395d710111123939
390010ec5df4ed5d0110edf4ed0010ec5df4ed0110edf4edb10602435458
4020030b030f022529262b6a0b690f7a0b790f8629852b950fac0bbb0bca
0bca0f0d005d71593130005d71015d011323262623220615141716171617
161716151404232226272623220607231133161633323635342626272e02
35343633321716163332363703c20b291de3846677151d402faaee5352fe
f7cc407256301f1a3a1225252cfb917085336884b9a257eeb5423e2f871b
1a1e0d056bfe3caacf6d472d232f2e215475686886aaf51a241428290200
d8e37a51305a51415b809e5fa2e4100c41203d00>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 9888 55 <0001004a0000050c054c002000acb90022ffc0b3181a3422b8ffc0403b10
1234202240225022c02204302240220201dd0707fc021d0118201d102222
09201d0f22231fdd1a1afc1e1d1f071a28002002100f080070010101b801
2a4022080f091f0902093e19101801201850189018031820101f01201f50
1f7f1f901f041fba012a001802aeb3216e58182b10f6f45d713c105d713c
fd5d3cf45d3c003f3c3f3cfd3c0110edec0010fd2b2b0110edec0010fd31
3001715d2b2b011123262627262323111416163333152135333237363736
351123220706072311050c24204e44265f6517433a2dfd3a2d3b241a0f0b
62893e571726054cfe917f6f2112fbea6834272525150e22186604163a51
96016f00>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 10162 56 <00010030ffe005a4054c002e010340a1180f192202180a27222a237b238d
0e8e23af23cd23ff2309000100020003100110021003700170027f167f17
b90ec828d828e8280e0523150e10222021262331215a2207c221f52302a6
0eb60e02330807201d0122221f201d1822222a202e1d00222411201d1722
23181717010100020c6a2409101128207f1f015f1fff1f021f7d30304030
50307030a0300530080f071f0702073e2929502a012a7d2f3d76182b4e10
f45d3c4d10fd5d3c4d105df65d713c4dfd3c003fed3f3c103c103c2b2b2b
2b3130437940222128090f0a2626250e250b25082f0027280d23102f0122
2109270c2f000f220c2f002b2b01103c2b103c2b2b2b2b8181005d717201
5d7172132115232206061511141616333236363511342627262335211523
22060706151114060623222726263511342626073002bc234f3b19377e60
6e9b4d261d2d5201d51c394c110d3ff4d3b060836c1a4056054c25213a74
fd68b6764e63aed802295b4e0f1725252e2e2053fdfdefd4b22f40c8a902
987539220100>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 10558 57 <00010010ffe105b2054c0021011db90023ffc0403a1a2434d02301330497
150210230138170139176917a917b8170416171715181919170005011d00
190d010d150e1d0d0c080b1d0c2119201d2140b8ff8c4036170706200800
0710070207072d1715141717150506062817191417171915080706040c05
191719171508050507210d0c000207060923b8ffc0b72d49342317171a00
ba012e001701824012200c402d4934600c010c1922236c218f6d18b8012c
852b2b4ef45d2b1a194dfdfd184e456544e62b003f3c3f3c3c3c12173901
123939111739874d2e2b0e7d10c405872e182b0e7d105dc42b1a180010ed
0110c00010ed0110c00010ed0110c05d0010ed0110c087100e3c87100e3c
b10602435458b718200811340a1701005d2b59313000717201725d712b01
150607060701230126262735211523220706151416170101363635342627
26233505b24a3a2a53fe2d21fe2f54394f028a16582017102e0121010c30
16201f2b47054c250c4332b9fbf40436c344092525160f1d12316bfd5d02
596d4a1a1e2e0c112500>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 10958 60 <00010012000005b0054c002d015bb90024ffe8b314213f23b8fff040a80d
391f252c172c182a242b2505141814191f246a26048a26a505a224b605b8
18b624b826b02fe7240939194623402f671e642377237624792708250424
052426262c262d3600360132040815242b18702f030005011d0016201d0e
4c222b1d011d241e1d1d07201d0d4c23101c011c181b1d1c102d012d262c
1d2d24250f2501252d171814172526171826252528060514062524060525
250617002d2d1d1d1c020d0e0830260126b80136b340050105b8020d4009
0624741f184f180218b801264015170607170f071f0702073e0016401670
16b0160416ba02e8002fffc0400d0f1234e02f012e2f6c218f6d182b2b5d
2bf65ded5d3c103c10f45ded10f45ded5d003f3c3f3c103c103c01191112
392f87082e182b0e7d10c487082e182b5d0e7d10c4180010ed0110c05d00
10ed0110c05d2b10ed0110c05d2b10ed0110c0313001715d5d5d5d005d2b
2b0115060706070111141616333315213533323736373635110126262735
211523220615141713133635342726273505b04324326cfeda1641364cfd
07473c231a0f0bfec15f4e41028a1d3b2f50f5f45b1a225b054c25091e2a
bbfe15feb86933272525150e22186601100245ac3d01252522132491fe3f
019996311b1219052500>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 0 0 <0002011c0000051c0500000300070042b40201c30607b803084013000504
c303000a0704c3010019080605c30203bc014100090125015600182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
011c0400fc2003c0fc400500fb002004c000>FAAAAA+TimesNewRomanPS-BoldMT AddT42Char 
FAAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/space 3 def
/A 36 def
/B 37 def
/C 38 def
/D 39 def
/E 40 def
/F 41 def
/G 42 def
/I 44 def
/J 45 def
/L 47 def
/M 48 def
/N 49 def
/O 50 def
/P 51 def
/R 53 def
/S 54 def
/T 55 def
/U 56 def
/V 57 def
/Y 60 def
end
FAAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 32 /space put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 89 /Y put
pop
end
%ADOEndSubsetFont
/EOLJPM+TimesNewRomanPS-BoldMT /FAAAAA+TimesNewRomanPS-BoldMT findfont ct_VMDictPut
/EOLJPM+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A /B /C /D /E 
/F /G /.notdef /I /J /.notdef /L /M 
/N /O /P /.notdef /R /S /T /U 
/V 2{/.notdef}rp /Y 166{/.notdef}rp]
EOLJPM+TimesNewRomanPS-BoldMT nf
EOLJPM+TimesNewRomanPS-BoldMT*1 [25.98 0 0 -25.98 0 0 ]msf
115.308 24.099 mo
(BEIJING UNIVERSITY OF )
[17.3289 17.3288 10.1064 12.99 10.1064 18.8095 20.2124 6.49503 18.7575 18.7576 10.1064 18.7576 
17.3289 18.7576 14.4968 10.1064 17.3289 17.7962 6.49506 20.2124 14.8604 0 ]xsh
202.028 55.299 mo
(POSTS AND )
[15.8736 20.2124 14.4449 17.3289 14.4449 5.11823 18.7576 18.7576 18.7575 0 ]xsh
113.088 86.499 mo
(TELECOMMUNICATIONS)
[17.3289 17.3288 17.3289 17.3289 18.7576 20.2124 24.5771 24.5251 18.7576 18.7576 10.1064 18.7575 
16.913 17.3289 10.1064 20.2125 18.7576 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/EOLJPM+TimesNewRomanPS-BoldMT*1 uf
/EOLJPM+TimesNewRomanPS-BoldMT uf
/FAAAAA+TimesNewRomanPS-BoldMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
